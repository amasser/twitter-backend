Index: main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"github.com/arman-aminian/twitter-backend/db\"\n\t\"os\"\n\t\n\t// _ \"github.com/arman-aminian/twitter-backend/docs\" // docs is generated by Swag CLI, you have to import it.\n\t\"github.com/arman-aminian/twitter-backend/handler\"\n\t\"github.com/arman-aminian/twitter-backend/model\"\n\t\"github.com/arman-aminian/twitter-backend/router\"\n\t\"github.com/arman-aminian/twitter-backend/store\"\n\techoSwagger \"github.com/swaggo/echo-swagger\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"log\"\n)\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\ttestHeap := false\n\n\tif !testHeap {\n\t\tr := router.New()\n\t\tr.GET(\"/swagger/*\", echoSwagger.WrapHandler)\n\t\tmongoClient, err := db.GetMongoClient()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tusersDb := db.SetupUsersDb(mongoClient)\n\t\ttweetsDb := db.SetupTweetsDb(mongoClient)\n\t\thashtagsDb := db.SetupHashtagsDb(mongoClient)\n\t\tg := r.Group(\"\")\n\t\tus := store.NewUserStore(usersDb)\n\t\tts := store.NewTweetStore(tweetsDb)\n\t\ths := store.NewHashtagStore(hashtagsDb)\n\t\th := handler.NewHandler(us, ts, hs)\n\t\th.Register(g)\n\n\t\t// Fire up the trends beforehand\n\t\t_ = hs.Update()\n\n\t\t// RUN THIS IF YOUR HASHTAG DATABASE IS EMPTY\n\t\t// StartUpTrends(ts, h)\n\t\t\n\t\tr.Logger.Fatal(r.Start(\":\" + port))\n\t}\n\n\t// if testHeap {\n\t// \t// Test HashtagStore\n\t// \ths := store.NewHashtagStore()\n\t// \theap.Init(hs)\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam\", Tweets: nil, Count: 10})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam2\", Tweets: nil, Count: 9})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam3\", Tweets: nil, Count: 8})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam4\", Tweets: nil, Count: 7})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam5\", Tweets: nil, Count: 6})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam6\", Tweets: nil, Count: 5})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam7\", Tweets: nil, Count: 4})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam8\", Tweets: nil, Count: 882})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam9\", Tweets: nil, Count: 100})\n\t// \tfor hs.Len() > 0 {\n\t// \t\tfmt.Printf(\"%v \", heap.Pop(hs))\n\t// \t}\n\t// \tfmt.Println()\n\t// \t// Changing one hashtag's size\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam\", Tweets: nil, Count: 10})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam2\", Tweets: nil, Count: 9})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam3\", Tweets: nil, Count: 8})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam4\", Tweets: nil, Count: 7})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam5\", Tweets: nil, Count: 6})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam6\", Tweets: nil, Count: 5})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam7\", Tweets: nil, Count: 4})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam8\", Tweets: nil, Count: 882})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam9\", Tweets: nil, Count: 100})\n\t// \tvar temp []*model.Hashtag\n\t// \toldVal := 8\n\t// \tnewVal := 125\n\t// \tfor hs.Len() > 0 {\n\t// \t\th := heap.Pop(hs).(*model.Hashtag)\n\t// \t\tprevCount := h.Count\n\t// \t\tif prevCount == oldVal {\n\t// \t\t\ttempH := model.Hashtag{\n\t// \t\t\t\tName:   h.Name,\n\t// \t\t\t\tTweets: h.Tweets,\n\t// \t\t\t\tCount:  newVal,\n\t// \t\t\t}\n\t// \t\t\ttemp = append(temp, &tempH)\n\t// \t\t\tbreak\n\t// \t\t} else {\n\t// \t\t\ttemp = append(temp, h)\n\t// \t\t}\n\t// \t}\n\t//\n\t// \tfor _, h := range temp {\n\t// \t\theap.Push(hs, h)\n\t// \t}\n\t// \tfor hs.Len() > 0 {\n\t// \t\tfmt.Printf(\"%v \", heap.Pop(hs))\n\t// \t}\n\t// \tfmt.Println()\n\t// }\n}\n\nfunc StartUpTrends(ts *store.TweetStore, h *handler.Handler) {\n\tallTweets, err := ts.GetAllTweets()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, bm := range allTweets {\n\t\tvar t *model.Tweet\n\t\tbsonBytes, _ := bson.Marshal(bm)\n\t\t_ = bson.Unmarshal(bsonBytes, &t)\n\t\thashtags := ts.ExtractHashtags(t)\n\t\tfor name, cnt := range hashtags {\n\t\t\th.AddHashtag(name, t, cnt)\n\t\t}\n\t}\n}\n\nfunc populateAll(us *store.UserStore, ts *store.TweetStore, hh *store.HashtagStore) {\n\tfor _, s := range []string{\"user1\", \"user2\", \"user3\", \"user4\"} {\n\t\tu := populateUser(s, s+\"@gmail.com\", s+\"_pass\", s+\" bio\", s+\" profile\", s+\" header\")\n\t\t_ = us.Create(u)\n\t}\n\n\t// ts.CreateTweet()\n}\n\nfunc populateUser(username, email, password, bio, profile, header string) *model.User {\n\tu := model.NewUser()\n\tu.Username = username\n\tu.Email = email\n\tu.Password = password\n\tu.Bio = bio\n\tu.ProfilePicture = profile\n\tu.HeaderPicture = header\n\treturn u\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.go	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
+++ main.go	(date 1611827471612)
@@ -44,7 +44,7 @@
 		// RUN THIS IF YOUR HASHTAG DATABASE IS EMPTY
 		// StartUpTrends(ts, h)
 		
-		r.Logger.Fatal(r.Start(":" + port))
+		r.Logger.Fatal(r.Start("127.0.0.1:" + port))
 	}
 
 	// if testHeap {
Index: db/db.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db\n\nimport (\n\t\"context\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"log\"\n\t\"sync\"\n)\n\nvar clientInstance *mongo.Client\nvar clientInstanceError error\nvar mongoOnce sync.Once\n\nconst (\n\t// PATH = \"mongodb://localhost:27017\"\n\tPATH     = \"mongodb+srv://arman-aminian:aaaa1234@twitter-db.ugqqk.mongodb.net/twitter?retryWrites=true&w=majority\"\n\tDB       = \"twitter\"\n\tUSERS    = \"customers\"\n\tTWEETS   = \"tweets\"\n\tHASHTAGS = \"hashtags\"\n)\n\nfunc GetMongoClient() (*mongo.Client, error) {\n\tmongoOnce.Do(func() {\n\t\tclientOptions := options.Client().ApplyURI(PATH)\n\t\tclient, err := mongo.Connect(context.TODO(), clientOptions)\n\t\tif err != nil {\n\t\t\tclientInstanceError = err\n\t\t} else {\n\t\t\terr = client.Ping(context.TODO(), nil)\n\t\t\tif err != nil {\n\t\t\t\tclientInstanceError = err\n\t\t\t}\n\t\t}\n\t\tclientInstance = client\n\t})\n\treturn clientInstance, clientInstanceError\n}\n\nfunc SetupUsersDb(mongoClient *mongo.Client) *mongo.Collection {\n\tusersDb := mongoClient.Database(\"twitter_db\").Collection(\"users\")\n\tcreateUniqueIndices(usersDb, \"email\")\n\treturn usersDb\n}\n\nfunc SetupHashtagsDb(mongoClient *mongo.Client) *mongo.Collection {\n\thashtagsDb := mongoClient.Database(\"twitter_db\").Collection(\"hashtags\")\n\tcreateUniqueIndices(hashtagsDb, \"name\")\n\treturn hashtagsDb\n}\n\nfunc createUniqueIndices(db *mongo.Collection, field string) {\n\t_, err := db.Indexes().CreateOne(\n\t\tcontext.Background(),\n\t\tmongo.IndexModel{\n\t\t\tKeys:    bson.D{{Key: field, Value: 1}},\n\t\t\tOptions: options.Index().SetUnique(true),\n\t\t},\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc SetupTweetsDb(mongoClient *mongo.Client) *mongo.Collection {\n\ttweetsDb := mongoClient.Database(\"twitter_db\").Collection(\"tweets\")\n\t_, err := tweetsDb.Indexes().CreateOne(\n\t\tcontext.Background(),\n\t\tmongo.IndexModel{\n\t\t\tKeys:    bson.D{{Key: \"text\", Value: \"text\"}},\n\t\t\tOptions: nil,\n\t\t})\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn tweetsDb\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- db/db.go	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
+++ db/db.go	(date 1611827481688)
@@ -14,8 +14,8 @@
 var mongoOnce sync.Once
 
 const (
-	// PATH = "mongodb://localhost:27017"
-	PATH     = "mongodb+srv://arman-aminian:aaaa1234@twitter-db.ugqqk.mongodb.net/twitter?retryWrites=true&w=majority"
+	PATH = "mongodb://localhost:27017"
+	// PATH     = "mongodb+srv://arman-aminian:aaaa1234@twitter-db.ugqqk.mongodb.net/twitter?retryWrites=true&w=majority"
 	DB       = "twitter"
 	USERS    = "customers"
 	TWEETS   = "tweets"
Index: handler/user.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package handler\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/arman-aminian/twitter-backend/model\"\n\t\"github.com/arman-aminian/twitter-backend/utils\"\n\t\"github.com/labstack/echo/v4\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"sort\"\n\t\"strconv\"\n)\n\nfunc (h *Handler) Dummy(c echo.Context) error {\n\treturn c.JSON(http.StatusCreated, errors.New(\"hello world\"))\n}\n\n// signUp godoc\n// @Summary Register a new user\n// @Description Register a new user\n// @ID sign-up\n// @Tags user\n// @Accept  json\n// @Produce  json\n// @Param user body userRegisterRequest true \"User info for registration\"\n// @Success 201 {object} userResponse\n// @Failure 400 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Router /users [post]\nfunc (h *Handler) SignUp(c echo.Context) error {\n\tu := model.NewUser()\n\treq := &userRegisterRequest{}\n\tif err := req.bind(c, u); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tif err := h.userStore.Create(u); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tresponse := newUserResponse(u)\n\t//cookie := new(http.Cookie)\n\t//cookie.Name = \"Token\"\n\t//cookie.Value = response.User.Token\n\t//cookie.Expires = time.Now().Add(24 * time.Hour)\n\t//c.SetCookie(cookie)\n\n\t//header('Access-Control-Allow-Origin', yourExactHostname);\n\n\t//c.Response().Header().Set(echo.HeaderAccessControlAllowOrigin, \"http://localhost:3000\")\n\t//c.Response().Header().Add(echo.HeaderAccessControlAllowCredentials, \"true\")\n\t//c.Response().Header().Add(echo.HeaderAccessControlAllowOrigin, \"http://localhost:3000\")\n\t//c.Response().Header().Add(echo.HeaderAccessControlAllowHeaders, \"Origin, X-Requested-With, Content-Type, Accept\")\n\t//c.Response().Header().\n\treturn c.JSON(http.StatusCreated, response)\n}\n\n// Login godoc\n// @Summary Login for existing user\n// @Description Login for existing user\n// @ID login\n// @Tags user\n// @Accept  json\n// @Produce  json\n// @Param user body userLoginRequest true \"Credentials to use\"\n// @Success 200 {object} userResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Router /users/login [post]\nfunc (h *Handler) Login(c echo.Context) error {\n\treq := &userLoginRequest{}\n\tif err := req.bind(c); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tu, err := h.userStore.GetByEmail(req.User.Email)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusForbidden, utils.AccessForbidden())\n\t}\n\tif !u.CheckPassword(req.User.Password) {\n\t\treturn c.JSON(http.StatusForbidden, utils.AccessForbidden())\n\t}\n\tresponse := newUserResponse(u)\n\t//cookie := new(http.Cookie)\n\t//cookie.Name = \"Token\"\n\t//cookie.Value = response.User.Token\n\t//cookie.Expires = time.Now().Add(24 * time.Hour)\n\t//c.SetCookie(cookie)\n\treturn c.JSON(http.StatusCreated, response)\n}\n\n// UpdateUser godoc\n// @Summary Update current user\n// @Description Update user information for current user\n// @ID update-user\n// @Tags user\n// @Accept  json\n// @Produce  json\n// @Param user body userUpdateRequest true \"User details to update. At least **one** field is required.\"\n// @Success 200 {object} userResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /user [put]\nfunc (h *Handler) UpdateUser(c echo.Context) error {\n\toldUser, err := h.userStore.GetByUsername(c.Param(\"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif oldUser == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tnewUser := model.NewUser()\n\n\tnewUser.Username = oldUser.Username\n\tnewUser.Tweets = oldUser.Tweets\n\tnewUser.Followings = oldUser.Followings\n\tnewUser.Followers = oldUser.Followers\n\tnewUser.Bio = oldUser.Bio\n\tnewUser.Name = oldUser.Name\n\tnewUser.ProfilePicture = oldUser.ProfilePicture\n\tnewUser.HeaderPicture = oldUser.HeaderPicture\n\tnewUser.Password = oldUser.Password\n\tnewUser.Email = oldUser.Email\n\tnewUser.Logs = oldUser.Logs\n\tnewUser.Notifications = oldUser.Notifications\n\n\t//_ = copier.Copy(&newUser, &oldUser)\n\treq := newUserUpdateRequest()\n\treq.populate(newUser)\n\tif err := req.bind(c, newUser); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tif err := h.userStore.Update(oldUser, newUser); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\treturn c.JSON(http.StatusOK, newUserResponse(newUser))\n}\n\n// GetProfile godoc\n// @Summary Get a profile\n// @Description Get a profile of a user of the system. Auth is optional\n// @ID get-profile\n// @Tags profile\n// @Accept  json\n// @Produce  json\n// @Param username path string true \"Username of the profile to get\"\n// @Success 200 {object} userResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /profiles/{username} [get]\nfunc (h *Handler) GetProfile(c echo.Context) error {\n\tdestUsername := c.Param(\"username\")\n\tfmt.Println(destUsername)\n\tu, err := h.userStore.GetByUsername(destUsername)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\treturn c.JSON(http.StatusOK, newProfileResponse(h.userStore, stringFieldFromToken(c, \"username\"), u))\n}\n\n// UpdateProfile godoc\n// @Summary Update a user's profile\n// @Description Update user profile\n// @ID update-profile\n// @Tags user\n// @Accept  json\n// @Produce  json\n// @Param user body userProfileUpdateRequest true \"User details to update. At least **one** field is required.\"\n// @Success 200 {object} userResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /user [put]\nfunc (h *Handler) UpdateProfile(c echo.Context) error {\n\tu, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\treq := newUserProfileUpdateRequest()\n\treq.populate(u)\n\tu.Name = c.FormValue(\"name\")\n\tu.Bio = c.FormValue(\"bio\")\n\tppf, err := c.FormFile(\"profile_picture\")\n\tif err == nil {\n\t\tsrc, err := ppf.Open()\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tdefer src.Close()\n\n\t\tmediaFolderName := \"media/profile-pictures/\"\n\t\tmediaPath := mediaFolderName + ppf.Filename\n\t\tdst, err := os.Create(mediaPath)\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tu.ProfilePicture = mediaPath\n\t} else {\n\t\t// Update without Profile Picture\n\t\tu.ProfilePicture = \"\"\n\t}\n\n\thpf, err := c.FormFile(\"header_picture\")\n\tif err == nil {\n\t\tsrc, err := hpf.Open()\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tdefer src.Close()\n\n\t\tmediaFolderName := \"media/header-pictures/\"\n\t\tmediaPath := mediaFolderName + hpf.Filename\n\t\tdst, err := os.Create(mediaPath)\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tu.HeaderPicture = mediaPath\n\t} else {\n\t\t// Update without Header Picture\n\t\tu.HeaderPicture = \"\"\n\t}\n\n\tif err := h.userStore.UpdateProfile(u); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tfmt.Println(u.Name)\n\treturn c.JSON(http.StatusOK, newProfileResponse(h.userStore, u.Username, u))\n}\n\nfunc (h *Handler) GetProfilePictureFile(c echo.Context) error {\n\tmediaFolderName := \"media/profile-pictures/\"\n\tmediaPath := mediaFolderName + c.Param(\"filename\")\n\treturn c.File(mediaPath)\n}\n\nfunc (h *Handler) GetHeaderPictureFile(c echo.Context) error {\n\tmediaFolderName := \"media/header-pictures/\"\n\tmediaPath := mediaFolderName + c.Param(\"filename\")\n\treturn c.File(mediaPath)\n}\n\n// Follow godoc\n// @Summary Follow a user\n// @Description Follow a user by username\n// @ID follow\n// @Tags follow\n// @Accept  json\n// @Produce  json\n// @Param username path string true \"Username of the profile you want to follow\"\n// @Success 200 {object} profileResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /profiles/{username}/follow [post]\nfunc (h *Handler) Follow(c echo.Context) error {\n\tfollower, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tu, err := h.userStore.GetByUsername(c.Param(\"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tif u.Username == follower.Username {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"can't follow yourself\")))\n\t}\n\tif Contains(*u.Followers, follower.Username) || Contains(*follower.Followings, u.Username) {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"already follows the target\")))\n\t}\n\n\tif err := h.userStore.AddFollower(u, follower); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\te := h.CreateFollowEvent(follower, u)\n\terr = h.userStore.AddLog(follower, e)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\terr = h.userStore.AddNotification(u, e)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\treturn c.JSON(http.StatusOK, newProfileResponse(h.userStore, follower.Username, u))\n}\n\n// Unfollow godoc\n// @Summary Unfollow a user\n// @Description Unfollow a user by username\n// @ID unfollow\n// @Tags follow\n// @Accept  json\n// @Produce  json\n// @Param username path string true \"Username of the profile you want to unfollow\"\n// @Success 201 {object} userResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /profiles/{username}/follow [delete]\nfunc (h *Handler) UnFollow(c echo.Context) error {\n\tfollower, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tu, err := h.userStore.GetByUsername(c.Param(\"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tif u.Username == follower.Username {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"can't unfollow yourself\")))\n\t}\n\tif !Contains(*u.Followers, follower.Username) || !Contains(*follower.Followings, u.Username) {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"doesn't follow the target\")))\n\t}\n\tif err := h.userStore.RemoveFollower(u, follower); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\treturn c.JSON(http.StatusOK, newProfileResponse(h.userStore, stringFieldFromToken(c, \"username\"), u))\n}\n\n// Articles godoc\n// @Summary Get recent articles globally\n// @Description Get most recent articles globally. Use query parameters to filter results. Auth is optional\n// @ID get-articles\n// @Tags article\n// @Accept  json\n// @Produce  json\n// @Param tag query string false \"Filter by tag\"\n// @Param author query string false \"Filter by author (username)\"\n// @Param favorited query string false \"Filter by favorites of a user (username)\"\n// @Param limit query integer false \"Limit number of articles returned (default is 20)\"\n// @Param offset query integer false \"Offset/skip number of articles (default is 0)\"\n// @Success 200 {object} articleListResponse\n// @Failure 500 {object} utils.Error\n// @Router /articles [get]\nfunc (h *Handler) GetTimeline(c echo.Context) error {\n\tday, err := strconv.Atoi(c.Param(\"day\"))\n\tif err != nil {\n\t\tday = 0\n\t}\n\tday = -1 * day\n\tu, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\tvar usernames []string\n\tfor _, f := range *u.Followings {\n\t\tusernames = append(usernames, f.Username)\n\t}\n\tusernames = append(usernames, u.Username)\n\tif len(usernames) == 0 {\n\t\treturn c.JSON(http.StatusOK, newTweetListResponse(c, stringFieldFromToken(c, \"username\"), nil, 0))\n\t}\n\n\ttweetsId, err := h.userStore.GetTweetIdListFromUsernameList(usernames)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tif len(*tweetsId) == 0 {\n\t\treturn c.JSON(http.StatusOK, newTweetListResponse(c, stringFieldFromToken(c, \"username\"), nil, 0))\n\t}\n\n\ttimelineTweets, err := h.tweetStore.GetTimelineFromTweetIDs(*tweetsId, day)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\t// sort timeline by tweet's creating time\n\ttimeline := *timelineTweets\n\tsort.Slice(timeline, func(i, j int) bool {\n\t\treturn timeline[i].Time.After(timeline[j].Time)\n\t})\n\treturn c.JSON(http.StatusOK, newTweetListResponse(c, stringFieldFromToken(c, \"username\"), &timeline, len(timeline)))\n}\n\nfunc (h *Handler) SearchUsernames(c echo.Context) error {\n\tquery := c.QueryParam(\"query\")\n\tif query == \"\" {\n\t\treturn c.JSON(http.StatusBadRequest, utils.NewError(errors.New(\"nothing to search for\")))\n\t}\n\tresult, err := h.userStore.GetUsernameSearchResult(query)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.JSON(http.StatusOK, newOwnerList(h.userStore, stringFieldFromToken(c, \"username\"), result))\n}\n\nfunc (h *Handler) SearchTweets(c echo.Context) error {\n\tquery := &model.SearchQuery{}\n\terr := c.Bind(query)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tif query.Query == \"\" {\n\t\treturn c.JSON(http.StatusBadRequest, utils.NewError(errors.New(\"nothing to search for\")))\n\t}\n\tresult, err := h.tweetStore.GetTweetSearchResult(query.Query)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\treturn c.JSON(http.StatusOK, newTweetListResponse(c, stringFieldFromToken(c, \"username\"), result, len(*result)))\n}\n\nfunc (h *Handler) GetFollowingAndFollowersList(c echo.Context) error {\n\tu, err := h.userStore.GetByUsername(c.Param(\"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\treturn c.JSON(http.StatusOK, newFollowingAndFollowersList(h.userStore, stringFieldFromToken(c, \"username\"), u))\n}\n\nfunc (h *Handler) GetLogs(c echo.Context) error {\n\tu, err := h.userStore.GetByUsername(c.Param(\"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tif u.Username != stringFieldFromToken(c, \"username\") {\n\t\treturn c.JSON(http.StatusBadRequest, errors.New(\"can't get another user's logs\"))\n\t}\n\treturn c.JSON(http.StatusOK, newLogsList(u))\n}\n\nfunc (h *Handler) GetNotifications(c echo.Context) error {\n\tu, err := h.userStore.GetByUsername(c.Param(\"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\treturn c.JSON(http.StatusOK, newNotificationsList(u))\n}\n\nfunc (h *Handler) GetSuggestions(c echo.Context) error {\n\tusername := stringFieldFromToken(c, \"username\")\n\tu, err := h.userStore.GetByUsername(username)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tif len(*u.Followings) == 0 {\n\t\treturn c.JSON(http.StatusOK, newOwnerList(h.userStore, username, nil))\n\t}\n\tvar suggestions []model.Owner\n\tfollowings := *u.Followings\n\tfor _, f := range followings {\n\t\tfollowing, _ := h.userStore.GetByUsername(f.Username)\n\t\tsuggestions = append(suggestions, *following.Followings...)\n\t}\n\n\tsuggestionsSize := len(suggestions)\n\tfollowingsSize := len(followings)\n\tfor i := range suggestions {\n\t\tfor j := range followings {\n\t\t\tindexI := suggestionsSize - 1 - i\n\t\t\tindexJ := followingsSize - 1 - j\n\t\t\tif suggestions[indexI].Username == followings[indexJ].Username || suggestions[indexI].Username == u.Username {\n\t\t\t\tsuggestions = removeIndex(suggestions, indexI)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\t// to sort suggestions by their frequencies\n\tsuggestionsFreq := dupCount(suggestions)\n\tsorted := make([]model.Owner, 0, len(suggestionsFreq))\n\tfor name := range suggestionsFreq {\n\t\tsorted = append(sorted, name)\n\t}\n\tsort.Slice(sorted, func(i, j int) bool {\n\t\treturn suggestionsFreq[sorted[i]] > suggestionsFreq[sorted[j]]\n\t})\n\n\tmaxNumberOfSuggestions := 3\n\tif len(sorted) < maxNumberOfSuggestions {\n\t\treturn c.JSON(http.StatusOK, newOwnerList(h.userStore, username, &sorted))\n\t}\n\tsorted = sorted[:maxNumberOfSuggestions]\n\treturn c.JSON(http.StatusOK, newOwnerList(h.userStore, username, &sorted))\n}\n\nfunc removeIndex(s []model.Owner, index int) []model.Owner {\n\treturn append(s[:index], s[index+1:]...)\n}\n\nfunc dupCount(list []model.Owner) map[model.Owner]int {\n\tduplicateFrequency := make(map[model.Owner]int)\n\tfor _, item := range list {\n\t\t_, exist := duplicateFrequency[item]\n\t\tif exist {\n\t\t\tduplicateFrequency[item] += 1 // increase counter by 1 if already in the map\n\t\t} else {\n\t\t\tduplicateFrequency[item] = 1 // else start counting from 1\n\t\t}\n\t}\n\treturn duplicateFrequency\n}\n\nfunc getFollowingUsernames(followings []model.Owner) []string {\n\tvar res []string\n\tfor _, f := range followings {\n\t\tres = append(res, f.Username)\n\t}\n\treturn res\n}\n\nfunc stringFieldFromToken(c echo.Context, field string) string {\n\tfield, ok := c.Get(field).(string)\n\tif !ok {\n\t\treturn \"\"\n\t}\n\treturn field\n}\n\nfunc Contains(slice []model.Owner, val string) bool {\n\tfor _, item := range slice {\n\t\tif item.Username == val {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- handler/user.go	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
+++ handler/user.go	(date 1611828661101)
@@ -24,12 +24,11 @@
 // @Tags user
 // @Accept  json
 // @Produce  json
-// @Param user body userRegisterRequest true "User info for registration"
+// @Param user body userRegisterRequest true "User info for registration: email, username and password"
 // @Success 201 {object} userResponse
-// @Failure 400 {object} utils.Error
 // @Failure 404 {object} utils.Error
-// @Failure 500 {object} utils.Error
-// @Router /users [post]
+// @Failure 422 {object} utils.Error
+// @Router /signup [post]
 func (h *Handler) SignUp(c echo.Context) error {
 	u := model.NewUser()
 	req := &userRegisterRequest{}
@@ -37,7 +36,7 @@
 		return c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))
 	}
 	if err := h.userStore.Create(u); err != nil {
-		return c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))
+		return c.JSON(http.StatusNotFound, utils.NewError(err))
 	}
 	response := newUserResponse(u)
 	//cookie := new(http.Cookie)
@@ -57,20 +56,18 @@
 }
 
 // Login godoc
-// @Summary Login for existing user
-// @Description Login for existing user
+// @Summary Login an existing user
+// @Description Login an existing user
 // @ID login
 // @Tags user
 // @Accept  json
 // @Produce  json
-// @Param user body userLoginRequest true "Credentials to use"
+// @Param user body userLoginRequest true "Credentials to use: email and password"
 // @Success 200 {object} userResponse
-// @Failure 400 {object} utils.Error
-// @Failure 401 {object} utils.Error
+// @Failure 403 {object} utils.Error
 // @Failure 422 {object} utils.Error
-// @Failure 404 {object} utils.Error
 // @Failure 500 {object} utils.Error
-// @Router /users/login [post]
+// @Router /login [post]
 func (h *Handler) Login(c echo.Context) error {
 	req := &userLoginRequest{}
 	if err := req.bind(c); err != nil {
@@ -96,16 +93,14 @@
 }
 
 // UpdateUser godoc
-// @Summary Update current user
-// @Description Update user information for current user
+// @Summary Update User
+// @Description Update user information for a user whom information is given
 // @ID update-user
 // @Tags user
 // @Accept  json
 // @Produce  json
 // @Param user body userUpdateRequest true "User details to update. At least **one** field is required."
 // @Success 200 {object} userResponse
-// @Failure 400 {object} utils.Error
-// @Failure 401 {object} utils.Error
 // @Failure 422 {object} utils.Error
 // @Failure 404 {object} utils.Error
 // @Failure 500 {object} utils.Error
@@ -134,7 +129,6 @@
 	newUser.Logs = oldUser.Logs
 	newUser.Notifications = oldUser.Notifications
 
-	//_ = copier.Copy(&newUser, &oldUser)
 	req := newUserUpdateRequest()
 	req.populate(newUser)
 	if err := req.bind(c, newUser); err != nil {
@@ -148,16 +142,13 @@
 
 // GetProfile godoc
 // @Summary Get a profile
-// @Description Get a profile of a user of the system. Auth is optional
+// @Description Get a profile of a user of the system. Authorization is optional
 // @ID get-profile
 // @Tags profile
 // @Accept  json
 // @Produce  json
 // @Param username path string true "Username of the profile to get"
 // @Success 200 {object} userResponse
-// @Failure 400 {object} utils.Error
-// @Failure 401 {object} utils.Error
-// @Failure 422 {object} utils.Error
 // @Failure 404 {object} utils.Error
 // @Failure 500 {object} utils.Error
 // @Security ApiKeyAuth
@@ -177,20 +168,18 @@
 
 // UpdateProfile godoc
 // @Summary Update a user's profile
-// @Description Update user profile
+// @Description Update user profile based on 4 entries: name, bio, and pictures
 // @ID update-profile
 // @Tags user
 // @Accept  json
 // @Produce  json
 // @Param user body userProfileUpdateRequest true "User details to update. At least **one** field is required."
 // @Success 200 {object} userResponse
-// @Failure 400 {object} utils.Error
-// @Failure 401 {object} utils.Error
 // @Failure 422 {object} utils.Error
 // @Failure 404 {object} utils.Error
 // @Failure 500 {object} utils.Error
 // @Security ApiKeyAuth
-// @Router /user [put]
+// @Router /profiles/{username} [put]
 func (h *Handler) UpdateProfile(c echo.Context) error {
 	u, err := h.userStore.GetByUsername(stringFieldFromToken(c, "username"))
 	if err != nil {
@@ -260,12 +249,30 @@
 	return c.JSON(http.StatusOK, newProfileResponse(h.userStore, u.Username, u))
 }
 
+// GetProfilePictureFile godoc
+// @Summary Get the profile picture
+// @Description Get the profile picture of a user based on the filename
+// @ID get-profile-picture
+// @Tags user
+// @Accept  string
+// @Produce  File
+// @Param user body string true "name of the file."
+// @Router /profile-pictures/{filename} [get]
 func (h *Handler) GetProfilePictureFile(c echo.Context) error {
 	mediaFolderName := "media/profile-pictures/"
 	mediaPath := mediaFolderName + c.Param("filename")
 	return c.File(mediaPath)
 }
 
+// GetHeaderPictureFile godoc
+// @Summary Get the header picture
+// @Description Get the header picture of a user based on the filename
+// @ID get-header-picture
+// @Tags user
+// @Accept  string
+// @Produce  File
+// @Param user body string true "name of the file."
+// @Router /header-pictures/{filename} [get]
 func (h *Handler) GetHeaderPictureFile(c echo.Context) error {
 	mediaFolderName := "media/header-pictures/"
 	mediaPath := mediaFolderName + c.Param("filename")
@@ -282,7 +289,6 @@
 // @Param username path string true "Username of the profile you want to follow"
 // @Success 200 {object} profileResponse
 // @Failure 400 {object} utils.Error
-// @Failure 401 {object} utils.Error
 // @Failure 422 {object} utils.Error
 // @Failure 404 {object} utils.Error
 // @Failure 500 {object} utils.Error
@@ -332,9 +338,8 @@
 // @Accept  json
 // @Produce  json
 // @Param username path string true "Username of the profile you want to unfollow"
-// @Success 201 {object} userResponse
+// @Success 201 {object} profileResponse
 // @Failure 400 {object} utils.Error
-// @Failure 401 {object} utils.Error
 // @Failure 422 {object} utils.Error
 // @Failure 404 {object} utils.Error
 // @Failure 500 {object} utils.Error
@@ -364,21 +369,17 @@
 	return c.JSON(http.StatusOK, newProfileResponse(h.userStore, stringFieldFromToken(c, "username"), u))
 }
 
-// Articles godoc
-// @Summary Get recent articles globally
-// @Description Get most recent articles globally. Use query parameters to filter results. Auth is optional
-// @ID get-articles
-// @Tags article
-// @Accept  json
+// GetTimeline godoc
+// @Summary Get the timeline of your account
+// @Description Get tweets of your followings. Auth is required.
+// @ID get-timeline
+// @Tags timeline
+// @Accept
 // @Produce  json
-// @Param tag query string false "Filter by tag"
-// @Param author query string false "Filter by author (username)"
-// @Param favorited query string false "Filter by favorites of a user (username)"
-// @Param limit query integer false "Limit number of articles returned (default is 20)"
-// @Param offset query integer false "Offset/skip number of articles (default is 0)"
-// @Success 200 {object} articleListResponse
+// @Success 200 {object} tweetListResponse
+// @Failure 422 {object} utils.Error
 // @Failure 500 {object} utils.Error
-// @Router /articles [get]
+// @Router /home [get]
 func (h *Handler) GetTimeline(c echo.Context) error {
 	day, err := strconv.Atoi(c.Param("day"))
 	if err != nil {
@@ -420,6 +421,16 @@
 	return c.JSON(http.StatusOK, newTweetListResponse(c, stringFieldFromToken(c, "username"), &timeline, len(timeline)))
 }
 
+// SearchUsernames godoc
+// @Summary Search a user by its username
+// @Description Search by specifying the username. Auth is optional.
+// @ID search-username
+// @Tags search
+// @Accept username query
+// @Produce  json
+// @Success 200 {object} tweetListResponse
+// @Failure 400 {object} utils.Error
+// @Router /search/username?query={username) [get]
 func (h *Handler) SearchUsernames(c echo.Context) error {
 	query := c.QueryParam("query")
 	if query == "" {
@@ -432,6 +443,17 @@
 	return c.JSON(http.StatusOK, newOwnerList(h.userStore, stringFieldFromToken(c, "username"), result))
 }
 
+// SearchTweets godoc
+// @Summary Search tweets related to query
+// @Description Search all the tweets related to the query.
+// @ID search-tweets
+// @Tags search
+// @Accept json
+// @Produce  json
+// @Param query query string true "Part of the tweets you want to search."
+// @Success 200 {object} tweetListResponse
+// @Failure 400 {object} utils.Error
+// @Router /search/tweet [get]
 func (h *Handler) SearchTweets(c echo.Context) error {
 	query := &model.SearchQuery{}
 	err := c.Bind(query)
@@ -448,6 +470,17 @@
 	return c.JSON(http.StatusOK, newTweetListResponse(c, stringFieldFromToken(c, "username"), result, len(*result)))
 }
 
+// GetFollowingAndFollowersList godoc
+// @Summary Get the list of followings and followers of a user. Auth is required.
+// @Description Search all the tweets related to the query.
+// @ID search-tweets
+// @Tags search
+// @Accept json
+// @Produce  json
+// @Param query query string true "Part of the tweets you want to search."
+// @Success 200 {object} tweetListResponse
+// @Failure 400 {object} utils.Error
+// @Router /search/tweet [get]
 func (h *Handler) GetFollowingAndFollowersList(c echo.Context) error {
 	u, err := h.userStore.GetByUsername(c.Param("username"))
 	if err != nil {
Index: docs/swagger.yaml
===================================================================
--- docs/swagger.yaml	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
+++ docs/swagger.yaml	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
@@ -1,130 +0,0 @@
-definitions:
-  handler.userLoginRequest:
-    properties:
-      user:
-        properties:
-          email:
-            type: string
-          password:
-            type: string
-        required:
-        - email
-        - password
-        type: object
-    type: object
-  handler.userRegisterRequest:
-    properties:
-      user:
-        properties:
-          email:
-            type: string
-          password:
-            type: string
-          username:
-            type: string
-        required:
-        - email
-        - password
-        - username
-        type: object
-    type: object
-  handler.userResponse:
-    properties:
-      user:
-        properties:
-          email:
-            type: string
-          token:
-            type: string
-          username:
-            type: string
-        type: object
-    type: object
-  utils.Error:
-    properties:
-      errors:
-        additionalProperties: true
-        type: object
-    type: object
-info:
-  contact: {}
-paths:
-  /users:
-    post:
-      consumes:
-      - application/json
-      description: Register a new user
-      operationId: sign-up
-      parameters:
-      - description: User info for registration
-        in: body
-        name: user
-        required: true
-        schema:
-          $ref: '#/definitions/handler.userRegisterRequest'
-      produces:
-      - application/json
-      responses:
-        "201":
-          description: Created
-          schema:
-            $ref: '#/definitions/handler.userResponse'
-        "400":
-          description: Bad Request
-          schema:
-            $ref: '#/definitions/utils.Error'
-        "404":
-          description: Not Found
-          schema:
-            $ref: '#/definitions/utils.Error'
-        "500":
-          description: Internal Server Error
-          schema:
-            $ref: '#/definitions/utils.Error'
-      summary: Register a new user
-      tags:
-      - user
-  /users/login:
-    post:
-      consumes:
-      - application/json
-      description: Login for existing user
-      operationId: login
-      parameters:
-      - description: Credentials to use
-        in: body
-        name: user
-        required: true
-        schema:
-          $ref: '#/definitions/handler.userLoginRequest'
-      produces:
-      - application/json
-      responses:
-        "200":
-          description: OK
-          schema:
-            $ref: '#/definitions/handler.userResponse'
-        "400":
-          description: Bad Request
-          schema:
-            $ref: '#/definitions/utils.Error'
-        "401":
-          description: Unauthorized
-          schema:
-            $ref: '#/definitions/utils.Error'
-        "404":
-          description: Not Found
-          schema:
-            $ref: '#/definitions/utils.Error'
-        "422":
-          description: Unprocessable Entity
-          schema:
-            $ref: '#/definitions/utils.Error'
-        "500":
-          description: Internal Server Error
-          schema:
-            $ref: '#/definitions/utils.Error'
-      summary: Login for existing user
-      tags:
-      - user
-swagger: "2.0"
Index: docs/swagger.json
===================================================================
--- docs/swagger.json	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
+++ docs/swagger.json	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
@@ -1,200 +0,0 @@
-{
-    "swagger": "2.0",
-    "info": {
-        "contact": {}
-    },
-    "paths": {
-        "/users": {
-            "post": {
-                "description": "Register a new user",
-                "consumes": [
-                    "application/json"
-                ],
-                "produces": [
-                    "application/json"
-                ],
-                "tags": [
-                    "user"
-                ],
-                "summary": "Register a new user",
-                "operationId": "sign-up",
-                "parameters": [
-                    {
-                        "description": "User info for registration",
-                        "name": "user",
-                        "in": "body",
-                        "required": true,
-                        "schema": {
-                            "$ref": "#/definitions/handler.userRegisterRequest"
-                        }
-                    }
-                ],
-                "responses": {
-                    "201": {
-                        "description": "Created",
-                        "schema": {
-                            "$ref": "#/definitions/handler.userResponse"
-                        }
-                    },
-                    "400": {
-                        "description": "Bad Request",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "404": {
-                        "description": "Not Found",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "500": {
-                        "description": "Internal Server Error",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    }
-                }
-            }
-        },
-        "/users/login": {
-            "post": {
-                "description": "Login for existing user",
-                "consumes": [
-                    "application/json"
-                ],
-                "produces": [
-                    "application/json"
-                ],
-                "tags": [
-                    "user"
-                ],
-                "summary": "Login for existing user",
-                "operationId": "login",
-                "parameters": [
-                    {
-                        "description": "Credentials to use",
-                        "name": "user",
-                        "in": "body",
-                        "required": true,
-                        "schema": {
-                            "$ref": "#/definitions/handler.userLoginRequest"
-                        }
-                    }
-                ],
-                "responses": {
-                    "200": {
-                        "description": "OK",
-                        "schema": {
-                            "$ref": "#/definitions/handler.userResponse"
-                        }
-                    },
-                    "400": {
-                        "description": "Bad Request",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "401": {
-                        "description": "Unauthorized",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "404": {
-                        "description": "Not Found",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "422": {
-                        "description": "Unprocessable Entity",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "500": {
-                        "description": "Internal Server Error",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    }
-                }
-            }
-        }
-    },
-    "definitions": {
-        "handler.userLoginRequest": {
-            "type": "object",
-            "properties": {
-                "user": {
-                    "type": "object",
-                    "required": [
-                        "email",
-                        "password"
-                    ],
-                    "properties": {
-                        "email": {
-                            "type": "string"
-                        },
-                        "password": {
-                            "type": "string"
-                        }
-                    }
-                }
-            }
-        },
-        "handler.userRegisterRequest": {
-            "type": "object",
-            "properties": {
-                "user": {
-                    "type": "object",
-                    "required": [
-                        "email",
-                        "password",
-                        "username"
-                    ],
-                    "properties": {
-                        "email": {
-                            "type": "string"
-                        },
-                        "password": {
-                            "type": "string"
-                        },
-                        "username": {
-                            "type": "string"
-                        }
-                    }
-                }
-            }
-        },
-        "handler.userResponse": {
-            "type": "object",
-            "properties": {
-                "user": {
-                    "type": "object",
-                    "properties": {
-                        "email": {
-                            "type": "string"
-                        },
-                        "token": {
-                            "type": "string"
-                        },
-                        "username": {
-                            "type": "string"
-                        }
-                    }
-                }
-            }
-        },
-        "utils.Error": {
-            "type": "object",
-            "properties": {
-                "errors": {
-                    "type": "object",
-                    "additionalProperties": true
-                }
-            }
-        }
-    }
-}
\ No newline at end of file
Index: docs/docs.go
===================================================================
--- docs/docs.go	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
+++ docs/docs.go	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
@@ -1,267 +0,0 @@
-// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
-// This file was generated by swaggo/swag
-
-package docs
-
-import (
-	"bytes"
-	"encoding/json"
-	"strings"
-
-	"github.com/alecthomas/template"
-	"github.com/swaggo/swag"
-)
-
-var doc = `{
-    "schemes": {{ marshal .Schemes }},
-    "swagger": "2.0",
-    "info": {
-        "description": "{{.Description}}",
-        "title": "{{.Title}}",
-        "contact": {},
-        "version": "{{.Version}}"
-    },
-    "host": "{{.Host}}",
-    "basePath": "{{.BasePath}}",
-    "paths": {
-        "/users": {
-            "post": {
-                "description": "Register a new user",
-                "consumes": [
-                    "application/json"
-                ],
-                "produces": [
-                    "application/json"
-                ],
-                "tags": [
-                    "user"
-                ],
-                "summary": "Register a new user",
-                "operationId": "sign-up",
-                "parameters": [
-                    {
-                        "description": "User info for registration",
-                        "name": "user",
-                        "in": "body",
-                        "required": true,
-                        "schema": {
-                            "$ref": "#/definitions/handler.userRegisterRequest"
-                        }
-                    }
-                ],
-                "responses": {
-                    "201": {
-                        "description": "Created",
-                        "schema": {
-                            "$ref": "#/definitions/handler.userResponse"
-                        }
-                    },
-                    "400": {
-                        "description": "Bad Request",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "404": {
-                        "description": "Not Found",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "500": {
-                        "description": "Internal Server Error",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    }
-                }
-            }
-        },
-        "/users/login": {
-            "post": {
-                "description": "Login for existing user",
-                "consumes": [
-                    "application/json"
-                ],
-                "produces": [
-                    "application/json"
-                ],
-                "tags": [
-                    "user"
-                ],
-                "summary": "Login for existing user",
-                "operationId": "login",
-                "parameters": [
-                    {
-                        "description": "Credentials to use",
-                        "name": "user",
-                        "in": "body",
-                        "required": true,
-                        "schema": {
-                            "$ref": "#/definitions/handler.userLoginRequest"
-                        }
-                    }
-                ],
-                "responses": {
-                    "200": {
-                        "description": "OK",
-                        "schema": {
-                            "$ref": "#/definitions/handler.userResponse"
-                        }
-                    },
-                    "400": {
-                        "description": "Bad Request",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "401": {
-                        "description": "Unauthorized",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "404": {
-                        "description": "Not Found",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "422": {
-                        "description": "Unprocessable Entity",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    },
-                    "500": {
-                        "description": "Internal Server Error",
-                        "schema": {
-                            "$ref": "#/definitions/utils.Error"
-                        }
-                    }
-                }
-            }
-        }
-    },
-    "definitions": {
-        "handler.userLoginRequest": {
-            "type": "object",
-            "properties": {
-                "user": {
-                    "type": "object",
-                    "required": [
-                        "email",
-                        "password"
-                    ],
-                    "properties": {
-                        "email": {
-                            "type": "string"
-                        },
-                        "password": {
-                            "type": "string"
-                        }
-                    }
-                }
-            }
-        },
-        "handler.userRegisterRequest": {
-            "type": "object",
-            "properties": {
-                "user": {
-                    "type": "object",
-                    "required": [
-                        "email",
-                        "password",
-                        "username"
-                    ],
-                    "properties": {
-                        "email": {
-                            "type": "string"
-                        },
-                        "password": {
-                            "type": "string"
-                        },
-                        "username": {
-                            "type": "string"
-                        }
-                    }
-                }
-            }
-        },
-        "handler.userResponse": {
-            "type": "object",
-            "properties": {
-                "user": {
-                    "type": "object",
-                    "properties": {
-                        "email": {
-                            "type": "string"
-                        },
-                        "token": {
-                            "type": "string"
-                        },
-                        "username": {
-                            "type": "string"
-                        }
-                    }
-                }
-            }
-        },
-        "utils.Error": {
-            "type": "object",
-            "properties": {
-                "errors": {
-                    "type": "object",
-                    "additionalProperties": true
-                }
-            }
-        }
-    }
-}`
-
-type swaggerInfo struct {
-	Version     string
-	Host        string
-	BasePath    string
-	Schemes     []string
-	Title       string
-	Description string
-}
-
-// SwaggerInfo holds exported Swagger Info so clients can modify it
-var SwaggerInfo = swaggerInfo{
-	Version:     "",
-	Host:        "",
-	BasePath:    "",
-	Schemes:     []string{},
-	Title:       "",
-	Description: "",
-}
-
-type s struct{}
-
-func (s *s) ReadDoc() string {
-	sInfo := SwaggerInfo
-	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)
-
-	t, err := template.New("swagger_info").Funcs(template.FuncMap{
-		"marshal": func(v interface{}) string {
-			a, _ := json.Marshal(v)
-			return string(a)
-		},
-	}).Parse(doc)
-	if err != nil {
-		return doc
-	}
-
-	var tpl bytes.Buffer
-	if err := t.Execute(&tpl, sInfo); err != nil {
-		return doc
-	}
-
-	return tpl.String()
-}
-
-func init() {
-	swag.Register(swag.Name, &s{})
-}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"BranchesTreeState\">\n    <expand>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n    </expand>\n    <select />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"013294ec-98ac-45bd-af48-e710fa1307fc\" name=\"Default Changelist\" comment=\"Fixed event sorting.\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Go File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"GOROOT\" path=\"/usr/local/go\" />\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"fix-owner\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GoLibraries\">\n    <option name=\"indexEntireGoPath\" value=\"false\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1nQeTZVwn2YiaBWpPzCEfnSF47D\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"DefaultGoTemplateProperty\" value=\"Go File\" />\n    <property name=\"GO_FMT\" value=\"true\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"go.import.settings.migrated\" value=\"true\" />\n    <property name=\"go.sdk.automatically.set\" value=\"true\" />\n    <property name=\"go.tried.to.enable.integration.vgo.integrator\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../../hw4\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"editor.preferences.tabs\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/test\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Go Build.go build main.go\">\n    <configuration default=\"true\" type=\"GoApplicationRunConfiguration\" factoryName=\"Go Application\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$/\" />\n      <go_parameters value=\"-i\" />\n      <kind value=\"FILE\" />\n      <filePath value=\"$PROJECT_DIR$/\" />\n      <package value=\"github.com/arman-aminian/twitter-backend\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"go build main.go\" type=\"GoApplicationRunConfiguration\" factoryName=\"Go Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$\" />\n      <kind value=\"FILE\" />\n      <filePath value=\"$PROJECT_DIR$/main.go\" />\n      <package value=\"github.com/arman-aminian/twitter-backend\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TestGetProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" type=\"GoTestRunConfiguration\" factoryName=\"Go Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$/handler\" />\n      <framework value=\"gotest\" />\n      <kind value=\"PACKAGE\" />\n      <package value=\"github.com/arman-aminian/twitter-backend/handler\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <filePath value=\"$PROJECT_DIR$/\" />\n      <pattern value=\"^TestGetProfileSuccess$\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TestUpdateProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" type=\"GoTestRunConfiguration\" factoryName=\"Go Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$/handler\" />\n      <framework value=\"gotest\" />\n      <kind value=\"PACKAGE\" />\n      <package value=\"github.com/arman-aminian/twitter-backend/handler\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <filePath value=\"$PROJECT_DIR$/\" />\n      <pattern value=\"^TestUpdateProfileSuccess$\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TestUpdateUserSuccess in github.com/arman-aminian/twitter-backend/handler\" type=\"GoTestRunConfiguration\" factoryName=\"Go Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$/handler\" />\n      <framework value=\"gotest\" />\n      <kind value=\"PACKAGE\" />\n      <package value=\"github.com/arman-aminian/twitter-backend/handler\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <filePath value=\"$PROJECT_DIR$/\" />\n      <pattern value=\"^TestUpdateUserSuccess$\" />\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"Go Build.go build main.go\" />\n      <item itemvalue=\"Go Test.TestGetProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n      <item itemvalue=\"Go Test.TestUpdateProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n      <item itemvalue=\"Go Test.TestUpdateUserSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Go Build.go build main.go\" />\n        <item itemvalue=\"Go Test.TestUpdateUserSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n        <item itemvalue=\"Go Test.TestUpdateProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n        <item itemvalue=\"Go Test.TestGetProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"013294ec-98ac-45bd-af48-e710fa1307fc\" name=\"Default Changelist\" comment=\"\" />\n      <created>1611326749549</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1611326749549</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Added sign up and login from the realworld example and changes are very similar to that.\">\n      <created>1611356145376</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611356145376</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added some tests, AddFollower, IsFollower.\">\n      <created>1611426506110</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611426506110</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Added GetProfile test.\">\n      <created>1611429775971</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611429775971</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Added updateProfile and updateUser.\">\n      <created>1611492691419</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611492691420</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Added updateProfile and updateUser.\">\n      <created>1611494231261</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611494231261</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Added Follow and UnFollow.\">\n      <created>1611505019777</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611505019777</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Added Like/Unlike and Retweet/UnRetweet.\">\n      <created>1611513416188</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611513416188</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Added Followers and Followings list.\">\n      <created>1611516118640</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611516118640</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Event source and target are now Owners.\">\n      <created>1611516943701</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611516943701</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Added Like and Retweet events. Event addition is done in UserStore now.\">\n      <created>1611521293502</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611521293502</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Fixed Retweet and UnRetweet. Added Get Tweet.\">\n      <created>1611578514469</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611578514469</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Added Trends and Hashtags. Fixed RemoveTweet in UserStore.\">\n      <created>1611603246138</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611603246138</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Added name to User.\">\n      <created>1611603860289</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611603860289</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Added Logs and Notifications List.\">\n      <created>1611618107627</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611618107627</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Hashtags have their own database now.\">\n      <created>1611637552156</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611637552156</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Added hashtag search.\">\n      <created>1611663527804</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611663527805</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Login now returns more information.\">\n      <created>1611667519343</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611667519343</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"Added Name to sign up input.\">\n      <created>1611684546365</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611684546366</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"Temporarily fixed GetTimeline.\">\n      <created>1611693045732</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611693045732</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"Fixed a bug relating user profile.\">\n      <created>1611759770441</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611759770441</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"We don't need token for searching.\">\n      <created>1611769267526</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611769267526</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"Fixed event sorting.\">\n      <created>1611811186347</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611811186347</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"23\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"2\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Added sign up and login from the realworld example and changes are very similar to that.\" />\n    <MESSAGE value=\"Added some tests, AddFollower, IsFollower.\" />\n    <MESSAGE value=\"Added GetProfile test.\" />\n    <MESSAGE value=\"Added updateProfile and updateUser.\" />\n    <MESSAGE value=\"Added Follow and UnFollow.\" />\n    <MESSAGE value=\"Added Like/Unlike and Retweet/UnRetweet.\" />\n    <MESSAGE value=\"Added Followers and Followings list.\" />\n    <MESSAGE value=\"Event source and target are now Owners.\" />\n    <MESSAGE value=\"Added Like and Retweet events. Event addition is done in UserStore now.\" />\n    <MESSAGE value=\"Fixed Retweet and UnRetweet. Added Get Tweet.\" />\n    <MESSAGE value=\"Added Trends and Hashtags. Fixed RemoveTweet in UserStore.\" />\n    <MESSAGE value=\"Added name to User.\" />\n    <MESSAGE value=\"Added Logs and Notifications List.\" />\n    <MESSAGE value=\"Hashtags have their own database now.\" />\n    <MESSAGE value=\"Added hashtag search.\" />\n    <MESSAGE value=\"Login now returns more information.\" />\n    <MESSAGE value=\"Added Name to sign up input.\" />\n    <MESSAGE value=\"Temporarily fixed GetTimeline.\" />\n    <MESSAGE value=\"Fixed a bug relating user profile.\" />\n    <MESSAGE value=\"We don't need token for searching.\" />\n    <MESSAGE value=\"Fixed event sorting.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed event sorting.\" />\n  </component>\n  <component name=\"VgoProject\">\n    <integration-enabled>true</integration-enabled>\n  </component>\n  <component name=\"WindowStateProjectService\">\n    <state x=\"513\" y=\"67\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1611811883713\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"513\" y=\"67\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611811883713\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"#com.intellij.execution.junit2.states.ComparisonFailureState$DiffDialog\" timestamp=\"1611491097649\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"#com.intellij.execution.junit2.states.ComparisonFailureState$DiffDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611491097649\" />\n    <state x=\"666\" y=\"182\" width=\"580\" height=\"747\" key=\"#go_build_test.go\" timestamp=\"1611501300508\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"666\" y=\"182\" width=\"580\" height=\"747\" key=\"#go_build_test.go/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611501300508\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" maximized=\"true\" key=\"DiffContextDialog\" timestamp=\"1611521988084\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" maximized=\"true\" key=\"DiffContextDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611521988084\" />\n    <state x=\"743\" y=\"313\" width=\"426\" height=\"485\" key=\"FileChooserDialogImpl\" timestamp=\"1611331807352\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"743\" y=\"313\" width=\"426\" height=\"485\" key=\"FileChooserDialogImpl/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611331807352\" />\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1611826707530\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.bottom/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611826707530\" />\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.center\" timestamp=\"1611826707529\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.center/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611826707529\" />\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.left\" timestamp=\"1611826707529\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.left/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611826707529\" />\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.right\" timestamp=\"1611826707529\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"325\" key=\"GridCell.Tab.0.right/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611826707529\" />\n    <state x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" key=\"MergeDialog\" timestamp=\"1611821926582\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" key=\"MergeDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611821926582\" />\n    <state x=\"574\" y=\"331\" width=\"714\" height=\"474\" key=\"MultipleFileMergeDialog\" timestamp=\"1611821926638\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"574\" y=\"331\" width=\"714\" height=\"474\" key=\"MultipleFileMergeDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611821926638\" />\n    <state x=\"686\" y=\"250\" width=\"539\" height=\"611\" key=\"RollbackChangesDialog\" timestamp=\"1611811079339\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"686\" y=\"250\" width=\"539\" height=\"611\" key=\"RollbackChangesDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611811079339\" />\n    <state x=\"464\" y=\"190\" width=\"992\" height=\"731\" key=\"SettingsEditor\" timestamp=\"1611412082455\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"464\" y=\"190\" width=\"992\" height=\"731\" key=\"SettingsEditor/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611412082455\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"ShowDiffWithBranchDialog\" timestamp=\"1611493173765\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"ShowDiffWithBranchDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611493173765\" />\n    <state x=\"555\" y=\"291\" width=\"802\" height=\"529\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1611811187894\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"555\" y=\"291\" width=\"802\" height=\"529\" key=\"Vcs.Push.Dialog.v2/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611811187894\" />\n    <state x=\"742\" y=\"318\" width=\"428\" height=\"474\" key=\"com.goide.refactor.move.GoMoveDeclarationDialog\" timestamp=\"1611588018886\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"742\" y=\"318\" width=\"428\" height=\"474\" key=\"com.goide.refactor.move.GoMoveDeclarationDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611588018886\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"com.intellij.history.integration.ui.views.FileHistoryDialog\" timestamp=\"1611751700040\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"com.intellij.history.integration.ui.views.FileHistoryDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611751700040\" />\n    <state x=\"765\" y=\"471\" width=\"389\" height=\"169\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1611821914425\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"765\" y=\"471\" width=\"389\" height=\"169\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611821914425\" />\n    <state x=\"68\" y=\"67\" width=\"1628\" height=\"818\" key=\"find.popup\" timestamp=\"1611760979486\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"68\" y=\"67\" width=\"1628\" height=\"818\" key=\"find.popup/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611760979486\" />\n    <state x=\"804\" y=\"316\" width=\"303\" height=\"478\" key=\"refactoring.ChangeSignatureDialog\" timestamp=\"1611586669164\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"804\" y=\"316\" width=\"303\" height=\"478\" key=\"refactoring.ChangeSignatureDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611586669164\" />\n    <state x=\"623\" y=\"259\" width=\"672\" height=\"678\" key=\"search.everywhere.popup\" timestamp=\"1611789080782\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"623\" y=\"259\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611789080782\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision a1cf0ac66d2a65e31e49edbfe4d3563a948c5004)
+++ .idea/workspace.xml	(date 1611827649032)
@@ -19,7 +19,16 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="013294ec-98ac-45bd-af48-e710fa1307fc" name="Default Changelist" comment="Fixed event sorting." />
+    <list default="true" id="013294ec-98ac-45bd-af48-e710fa1307fc" name="Default Changelist" comment="Fixed event sorting.">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/boobier" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/db/db.go" beforeDir="false" afterPath="$PROJECT_DIR$/db/db.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/docs/docs.go" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/docs/swagger.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/docs/swagger.yaml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/handler/user.go" beforeDir="false" afterPath="$PROJECT_DIR$/handler/user.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/main.go" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -45,7 +54,7 @@
     <option name="indexEntireGoPath" value="false" />
   </component>
   <component name="ProjectId" id="1nQeTZVwn2YiaBWpPzCEfnSF47D" />
-  <component name="ProjectLevelVcsManager">
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
     <ConfirmationsSetting value="2" id="Add" />
   </component>
   <component name="ProjectViewState">
@@ -375,22 +384,22 @@
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
     <state x="743" y="313" width="426" height="485" key="FileChooserDialogImpl/0.25.1920.1055@0.25.1920.1055" timestamp="1611331807352" />
-    <state width="1874" height="325" key="GridCell.Tab.0.bottom" timestamp="1611826707530">
+    <state width="1874" height="325" key="GridCell.Tab.0.bottom" timestamp="1611827502671">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="325" key="GridCell.Tab.0.bottom/0.25.1920.1055@0.25.1920.1055" timestamp="1611826707530" />
-    <state width="1874" height="325" key="GridCell.Tab.0.center" timestamp="1611826707529">
+    <state width="1874" height="325" key="GridCell.Tab.0.bottom/0.25.1920.1055@0.25.1920.1055" timestamp="1611827502671" />
+    <state width="1874" height="325" key="GridCell.Tab.0.center" timestamp="1611827502670">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="325" key="GridCell.Tab.0.center/0.25.1920.1055@0.25.1920.1055" timestamp="1611826707529" />
-    <state width="1874" height="325" key="GridCell.Tab.0.left" timestamp="1611826707529">
+    <state width="1874" height="325" key="GridCell.Tab.0.center/0.25.1920.1055@0.25.1920.1055" timestamp="1611827502670" />
+    <state width="1874" height="325" key="GridCell.Tab.0.left" timestamp="1611827502669">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="325" key="GridCell.Tab.0.left/0.25.1920.1055@0.25.1920.1055" timestamp="1611826707529" />
-    <state width="1874" height="325" key="GridCell.Tab.0.right" timestamp="1611826707529">
+    <state width="1874" height="325" key="GridCell.Tab.0.left/0.25.1920.1055@0.25.1920.1055" timestamp="1611827502669" />
+    <state width="1874" height="325" key="GridCell.Tab.0.right" timestamp="1611827502670">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="325" key="GridCell.Tab.0.right/0.25.1920.1055@0.25.1920.1055" timestamp="1611826707529" />
+    <state width="1874" height="325" key="GridCell.Tab.0.right/0.25.1920.1055@0.25.1920.1055" timestamp="1611827502670" />
     <state x="0" y="25" width="1920" height="1055" key="MergeDialog" timestamp="1611821926582">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
