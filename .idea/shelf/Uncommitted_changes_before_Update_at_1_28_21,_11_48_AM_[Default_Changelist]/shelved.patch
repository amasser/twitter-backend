Index: main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"github.com/arman-aminian/twitter-backend/db\"\n\t\"os\"\n\n\t//_ \"github.com/arman-aminian/twitter-backend/docs\" // docs is generated by Swag CLI, you have to import it.\n\t\"github.com/arman-aminian/twitter-backend/handler\"\n\t\"github.com/arman-aminian/twitter-backend/model\"\n\t\"github.com/arman-aminian/twitter-backend/router\"\n\t\"github.com/arman-aminian/twitter-backend/store\"\n\t//echoSwagger \"github.com/swaggo/echo-swagger\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"log\"\n)\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\ttestHeap := false\n\n\tif !testHeap {\n\t\tr := router.New()\n\t\t//r.GET(\"/swagger/*\", echoSwagger.WrapHandler)\n\t\tmongoClient, err := db.GetMongoClient()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tusersDb := db.SetupUsersDb(mongoClient)\n\t\ttweetsDb := db.SetupTweetsDb(mongoClient)\n\t\thashtagsDb := db.SetupHashtagsDb(mongoClient)\n\t\tg := r.Group(\"\")\n\t\tus := store.NewUserStore(usersDb)\n\t\tts := store.NewTweetStore(tweetsDb)\n\t\ths := store.NewHashtagStore(hashtagsDb)\n\t\th := handler.NewHandler(us, ts, hs)\n\t\th.Register(g)\n\n\t\t// Fire up the trends beforehand\n\t\t_ = hs.Update()\n\n\t\t// RUN THIS IF YOUR HASHTAG DATABASE IS EMPTY\n\t\t// StartUpTrends(ts, h)\n\t\t\n\t\tr.Logger.Fatal(r.Start(\"0.0.0.0:\" + port))\n\t}\n\n\t// if testHeap {\n\t// \t// Test HashtagStore\n\t// \ths := store.NewHashtagStore()\n\t// \theap.Init(hs)\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam\", Tweets: nil, Count: 10})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam2\", Tweets: nil, Count: 9})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam3\", Tweets: nil, Count: 8})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam4\", Tweets: nil, Count: 7})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam5\", Tweets: nil, Count: 6})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam6\", Tweets: nil, Count: 5})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam7\", Tweets: nil, Count: 4})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam8\", Tweets: nil, Count: 882})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam9\", Tweets: nil, Count: 100})\n\t// \tfor hs.Len() > 0 {\n\t// \t\tfmt.Printf(\"%v \", heap.Pop(hs))\n\t// \t}\n\t// \tfmt.Println()\n\t// \t// Changing one hashtag's size\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam\", Tweets: nil, Count: 10})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam2\", Tweets: nil, Count: 9})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam3\", Tweets: nil, Count: 8})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam4\", Tweets: nil, Count: 7})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam5\", Tweets: nil, Count: 6})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam6\", Tweets: nil, Count: 5})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam7\", Tweets: nil, Count: 4})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam8\", Tweets: nil, Count: 882})\n\t// \theap.Push(hs, &model.Hashtag{Name: \"salam9\", Tweets: nil, Count: 100})\n\t// \tvar temp []*model.Hashtag\n\t// \toldVal := 8\n\t// \tnewVal := 125\n\t// \tfor hs.Len() > 0 {\n\t// \t\th := heap.Pop(hs).(*model.Hashtag)\n\t// \t\tprevCount := h.Count\n\t// \t\tif prevCount == oldVal {\n\t// \t\t\ttempH := model.Hashtag{\n\t// \t\t\t\tName:   h.Name,\n\t// \t\t\t\tTweets: h.Tweets,\n\t// \t\t\t\tCount:  newVal,\n\t// \t\t\t}\n\t// \t\t\ttemp = append(temp, &tempH)\n\t// \t\t\tbreak\n\t// \t\t} else {\n\t// \t\t\ttemp = append(temp, h)\n\t// \t\t}\n\t// \t}\n\t//\n\t// \tfor _, h := range temp {\n\t// \t\theap.Push(hs, h)\n\t// \t}\n\t// \tfor hs.Len() > 0 {\n\t// \t\tfmt.Printf(\"%v \", heap.Pop(hs))\n\t// \t}\n\t// \tfmt.Println()\n\t// }\n}\n\nfunc StartUpTrends(ts *store.TweetStore, h *handler.Handler) {\n\tallTweets, err := ts.GetAllTweets()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, bm := range allTweets {\n\t\tvar t *model.Tweet\n\t\tbsonBytes, _ := bson.Marshal(bm)\n\t\t_ = bson.Unmarshal(bsonBytes, &t)\n\t\thashtags := ts.ExtractHashtags(t)\n\t\tfor name, cnt := range hashtags {\n\t\t\th.AddHashtag(name, t, cnt)\n\t\t}\n\t}\n}\n\nfunc populateAll(us *store.UserStore, ts *store.TweetStore, hh *store.HashtagStore) {\n\tfor _, s := range []string{\"user1\", \"user2\", \"user3\", \"user4\"} {\n\t\tu := populateUser(s, s+\"@gmail.com\", s+\"_pass\", s+\" bio\", s+\" profile\", s+\" header\")\n\t\t_ = us.Create(u)\n\t}\n\n\t// ts.CreateTweet()\n}\n\nfunc populateUser(username, email, password, bio, profile, header string) *model.User {\n\tu := model.NewUser()\n\tu.Username = username\n\tu.Email = email\n\tu.Password = password\n\tu.Bio = bio\n\tu.ProfilePicture = profile\n\tu.HeaderPicture = header\n\treturn u\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.go	(revision e2bdbad85d693a8060ec435ae44289e8fa9ccc8d)
+++ main.go	(date 1611820810381)
@@ -44,7 +44,7 @@
 		// RUN THIS IF YOUR HASHTAG DATABASE IS EMPTY
 		// StartUpTrends(ts, h)
 		
-		r.Logger.Fatal(r.Start("0.0.0.0:" + port))
+		r.Logger.Fatal(r.Start(":" + port))
 	}
 
 	// if testHeap {
Index: db/db.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db\n\nimport (\n\t\"context\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"log\"\n\t\"sync\"\n)\n\nvar clientInstance *mongo.Client\nvar clientInstanceError error\nvar mongoOnce sync.Once\n\nconst (\n\t//PATH = \"mongodb://localhost:27017\"\n\tPATH     = \"mongodb+srv://arman-aminian:aaaa1234@twitter-db.ugqqk.mongodb.net/twitter?retryWrites=true&w=majority\"\n\tDB       = \"twitter\"\n\tUSERS    = \"customers\"\n\tTWEETS   = \"tweets\"\n\tHASHTAGS = \"hashtags\"\n)\n\nfunc GetMongoClient() (*mongo.Client, error) {\n\tmongoOnce.Do(func() {\n\t\tclientOptions := options.Client().ApplyURI(PATH)\n\t\tclient, err := mongo.Connect(context.TODO(), clientOptions)\n\t\tif err != nil {\n\t\t\tclientInstanceError = err\n\t\t} else {\n\t\t\terr = client.Ping(context.TODO(), nil)\n\t\t\tif err != nil {\n\t\t\t\tclientInstanceError = err\n\t\t\t}\n\t\t}\n\t\tclientInstance = client\n\t})\n\treturn clientInstance, clientInstanceError\n}\n\nfunc SetupUsersDb(mongoClient *mongo.Client) *mongo.Collection {\n\tusersDb := mongoClient.Database(\"twitter_db\").Collection(\"users\")\n\tcreateUniqueIndices(usersDb, \"email\")\n\treturn usersDb\n}\n\nfunc SetupHashtagsDb(mongoClient *mongo.Client) *mongo.Collection {\n\thashtagsDb := mongoClient.Database(\"twitter_db\").Collection(\"hashtags\")\n\tcreateUniqueIndices(hashtagsDb, \"name\")\n\treturn hashtagsDb\n}\n\nfunc createUniqueIndices(db *mongo.Collection, field string) {\n\t_, err := db.Indexes().CreateOne(\n\t\tcontext.Background(),\n\t\tmongo.IndexModel{\n\t\t\tKeys:    bson.D{{Key: field, Value: 1}},\n\t\t\tOptions: options.Index().SetUnique(true),\n\t\t},\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc SetupTweetsDb(mongoClient *mongo.Client) *mongo.Collection {\n\ttweetsDb := mongoClient.Database(\"twitter_db\").Collection(\"tweets\")\n\t_, err := tweetsDb.Indexes().CreateOne(\n\t\tcontext.Background(),\n\t\tmongo.IndexModel{\n\t\t\tKeys:    bson.D{{Key: \"text\", Value: \"text\"}},\n\t\t\tOptions: nil,\n\t\t})\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn tweetsDb\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- db/db.go	(revision e2bdbad85d693a8060ec435ae44289e8fa9ccc8d)
+++ db/db.go	(date 1611820640057)
@@ -14,8 +14,8 @@
 var mongoOnce sync.Once
 
 const (
-	//PATH = "mongodb://localhost:27017"
-	PATH     = "mongodb+srv://arman-aminian:aaaa1234@twitter-db.ugqqk.mongodb.net/twitter?retryWrites=true&w=majority"
+	PATH = "mongodb://localhost:27017"
+	// PATH     = "mongodb+srv://arman-aminian:aaaa1234@twitter-db.ugqqk.mongodb.net/twitter?retryWrites=true&w=majority"
 	DB       = "twitter"
 	USERS    = "customers"
 	TWEETS   = "tweets"
Index: handler/response.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package handler\n\nimport (\n\t\"github.com/arman-aminian/twitter-backend/model\"\n\t\"github.com/arman-aminian/twitter-backend/user\"\n\t\"github.com/arman-aminian/twitter-backend/utils\"\n\t\"github.com/labstack/echo/v4\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"time\"\n)\n\ntype userResponse struct {\n\tUser struct {\n\t\tUsername       string `json:\"username\" bson:\"_id\"`\n\t\tEmail          string `json:\"email\"`\n\t\tName           string `json:\"name\"`\n\t\tBio            string `json:\"bio\"`\n\t\tProfilePicture string `json:\"profile_picture\"`\n\t\tToken          string `json:\"token\"`\n\t} `json:\"user\"`\n}\n\nfunc newUserResponse(u *model.User) *userResponse {\n\tr := new(userResponse)\n\tr.User.Username = u.Username\n\tr.User.Email = u.Email\n\tr.User.Name = u.Name\n\tr.User.Bio = u.Bio\n\tr.User.ProfilePicture = u.ProfilePicture\n\tr.User.Token = utils.GenerateJWT(u.Username)\n\treturn r\n}\n\ntype profileResponse struct {\n\tProfile struct {\n\t\tName           string                `json:\"name\"`\n\t\tIsFollowing    bool                  `json:\"is_following, omitempty\"`\n\t\tUsername       string                `json:\"username\" bson:\"_id\"`\n\t\tBio            string                `json:\"bio\"`\n\t\tProfilePicture string                `json:\"profile_picture\"`\n\t\tHeaderPicture  string                `json:\"header_picture\"`\n\t\tTweets         *[]primitive.ObjectID `json:\"tweets\"`\n\t\tFollowings     *[]model.Owner        `json:\"followings\"`\n\t\tFollowers      *[]model.Owner        `json:\"followers\"`\n\t} `json:\"profile\"`\n}\n\nfunc newProfileResponse(us user.Store, srcUsername string, u *model.User) *profileResponse {\n\tr := new(profileResponse)\n\tr.Profile.Name = u.Name\n\tr.Profile.Username = u.Username\n\tr.Profile.Bio = u.Bio\n\tr.Profile.ProfilePicture = u.ProfilePicture\n\tr.Profile.HeaderPicture = u.HeaderPicture\n\tr.Profile.Tweets = u.Tweets\n\tr.Profile.Followings = u.Followings\n\tr.Profile.Followers = u.Followers\n\tr.Profile.IsFollowing, _ = us.IsFollower(u.Username, srcUsername)\n\treturn r\n}\n\ntype FollowersAndFollowingListResponse struct {\n\tFollowers   *[]model.Owner `json:\"followers\" bson:\"followers\"`\n\tFollowings  *[]model.Owner `json:\"followings\" bson:\"followings\"`\n\tIsFollowing bool           `json:\"is_following, omitempty\"`\n}\n\nfunc newFollowingAndFollowersList(us user.Store, srcUsername string, u *model.User) *FollowersAndFollowingListResponse {\n\tl := new(FollowersAndFollowingListResponse)\n\ttemp := *u.Followers\n\tfor i := range temp {\n\t\ttemp[i].IsFollowing, _ = us.IsFollower(temp[i].Username, srcUsername)\n\t}\n\tl.Followers = &temp\n\ttemp2 := *u.Followings\n\tfor i := range temp2 {\n\t\ttemp2[i].IsFollowing, _ = us.IsFollower(temp2[i].Username, srcUsername)\n\t}\n\tl.Followings = &temp2\n\tl.IsFollowing, _ = us.IsFollower(u.Username, srcUsername)\n\treturn l\n}\n\ntype OwnerListResponse struct {\n\tUsers *[]model.Owner `json:\"users\"`\n}\n\nfunc newOwnerList(users *[]model.Owner) *OwnerListResponse {\n\tl := new(OwnerListResponse)\n\tl.Users = users\n\treturn l\n}\n\ntype SingleEventResponse struct {\n\tMode      string      `json:\"mode\"`\n\tSource    model.Owner `json:\"source\"`\n\tTarget    model.Owner `json:\"target\"`\n\tContent   string      `json:\"content\"`\n\tTweet     model.Tweet `json:\"tweet\"`\n\tTimeStamp time.Time   `json:\"timestamp\"`\n}\n\ntype EventListResponse struct {\n\tEvents []SingleEventResponse `json:\"events\"`\n}\n\nfunc newLogsList(u *model.User) *EventListResponse {\n\tret := new(EventListResponse)\n\tfor _, e := range *u.Logs {\n\t\tl := new(SingleEventResponse)\n\t\tl.Mode = e.Mode\n\t\tl.Source = e.Source\n\t\tl.Target = e.Target\n\t\tl.Content = e.Content\n\t\tl.Tweet = e.Tweet\n\t\tl.TimeStamp = e.TimeStamp\n\t\tret.Events = append([]SingleEventResponse{*l}, ret.Events...)\n\t}\n\treturn ret\n}\n\nfunc newNotificationsList(u *model.User) *EventListResponse {\n\tret := new(EventListResponse)\n\tfor _, e := range *u.Notifications {\n\t\tl := new(SingleEventResponse)\n\t\tl.Mode = e.Mode\n\t\tl.Source = e.Source\n\t\tl.Target = e.Target\n\t\tl.Content = e.Content\n\t\tl.Tweet = e.Tweet\n\t\tl.TimeStamp = e.TimeStamp\n\t\tret.Events = append([]SingleEventResponse{*l}, ret.Events...)\n\t}\n\treturn ret\n}\n\n//\t********************** Tweet Response **********************\n\ntype tweetResponse struct {\n\tID            string                `json:\"id\"`\n\tText          string                `json:\"text\"`\n\tMedia         string                `json:\"media\"`\n\tLiked         bool                  `json:\"liked\"`\n\tLikesCount    int                   `json:\"likes_count\"`\n\tRetweeted     bool                  `json:\"retweeted\"`\n\tRetweetsCount int                   `json:\"retweets_count\"`\n\tTime          time.Time             `json:\"time\" bson:\"time\"`\n\tOwner         model.Owner           `json:\"owner\"`\n\tParents       *[]model.CommentTweet `json:\"parents\" bson:\"parents\"`\n\tComments      *[]model.CommentTweet `json:\"comments\" bson:\"comments\"`\n}\n\ntype singleTweetResponse struct {\n\tTweet *tweetResponse `json:\"tweet\"`\n}\n\ntype tweetsResponse struct {\n\tTweets []tweetResponse `json:\"tweets\"`\n}\n\ntype tweetListResponse struct {\n\tTweets      []tweetResponse `json:\"tweets\"`\n\tTweetsCount int             `json:\"tweetsCount\"`\n}\n\nfunc newTweetsResponse(username string, tweets *[]model.Tweet) *tweetsResponse {\n\ttr := make([]tweetResponse, len(*tweets))\n\tif tweets == nil {\n\t\treturn &tweetsResponse{tr}\n\t}\n\tfor i, tweet := range *tweets {\n\t\ttr[i].ID = tweet.ID.Hex()\n\t\ttr[i].Text = tweet.Text\n\t\ttr[i].Parents = tweet.Parents\n\t\ttr[i].Comments = tweet.Comments\n\t\ttr[i].Media = tweet.Media\n\t\ttr[i].Time = tweet.Time\n\t\t\n\t\tfor _, t := range *tweet.Likes {\n\t\t\tif t.Username == username {\n\t\t\t\ttr[i].Liked = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ttr[i].LikesCount = len(*tweet.Likes)\n\t\tfor _, t := range *tweet.Retweets {\n\t\t\tif t.Username == username {\n\t\t\t\ttr[i].Retweeted = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ttr[i].RetweetsCount = len(*tweet.Retweets)\n\t\ttr[i].Owner.Username = tweet.Owner.Username\n\t\ttr[i].Owner.ProfilePicture = tweet.Owner.ProfilePicture\n\t}\n\treturn &tweetsResponse{tr}\n}\n\nfunc newTweetResponse(c echo.Context, t *model.Tweet) *singleTweetResponse {\n\ttr := new(tweetResponse)\n\ttr.ID = t.ID.Hex()\n\ttr.Text = t.Text\n\ttr.Parents = t.Parents\n\ttr.Comments = t.Comments\n\ttr.Media = t.Media\n\ttr.Time = t.Time\n\tfor _, u := range *t.Likes {\n\t\tif u.Username == stringFieldFromToken(c, \"username\") {\n\t\t\ttr.Liked = true\n\t\t\tbreak\n\t\t}\n\t}\n\ttr.LikesCount = len(*t.Likes)\n\tfor _, u := range *t.Retweets {\n\t\tif u.Username == stringFieldFromToken(c, \"username\") {\n\t\t\ttr.Retweeted = true\n\t\t\tbreak\n\t\t}\n\t}\n\ttr.RetweetsCount = len(*t.Retweets)\n\ttr.Owner.Username = t.Owner.Username\n\ttr.Owner.ProfilePicture = t.Owner.ProfilePicture\n\t\n\treturn &singleTweetResponse{tr}\n}\n\nfunc newTweetListResponse(c echo.Context, username string, tweets *[]model.Tweet, size int) *tweetListResponse {\n\ttr := make([]tweetResponse, size)\n\tif tweets == nil {\n\t\treturn &tweetListResponse{tr, size}\n\t}\n\tfor i, tweet := range *tweets {\n\t\ttr[i].ID = tweet.ID.Hex()\n\t\ttr[i].Text = tweet.Text\n\t\ttr[i].Parents = tweet.Parents\n\t\ttr[i].Comments = tweet.Comments\n\t\ttr[i].Media = tweet.Media\n\t\ttr[i].Time = tweet.Time\n\t\t\n\t\tfor _, t := range *tweet.Likes {\n\t\t\tif t.Username == username {\n\t\t\t\ttr[i].Liked = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ttr[i].LikesCount = len(*tweet.Likes)\n\t\tfor _, t := range *tweet.Retweets {\n\t\t\tif t.Username == username {\n\t\t\t\ttr[i].Retweeted = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ttr[i].RetweetsCount = len(*tweet.Retweets)\n\t\ttr[i].Owner.Username = tweet.Owner.Username\n\t\ttr[i].Owner.ProfilePicture = tweet.Owner.ProfilePicture\n\t}\n\treturn &tweetListResponse{tr, size}\n}\n\ntype tweetLikeAndRetweetResponse struct {\n\tLikesList    *[]model.Owner `json:\"likes\" bson:\"likes\"`\n\tRetweetsList *[]model.Owner `json:\"retweets\" bson:\"retweets\"`\n}\n\nfunc newLikeAndRetweetResponse(t *model.Tweet) *tweetLikeAndRetweetResponse {\n\ttr := new(tweetLikeAndRetweetResponse)\n\ttr.LikesList = t.Likes\n\ttr.RetweetsList = t.Retweets\n\treturn tr\n}\n\ntype timelineResponse struct {\n\ttimeline *[]model.Tweet\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- handler/response.go	(revision e2bdbad85d693a8060ec435ae44289e8fa9ccc8d)
+++ handler/response.go	(date 1611821914445)
@@ -112,7 +112,7 @@
 		l.Source = e.Source
 		l.Target = e.Target
 		l.Content = e.Content
-		l.Tweet = e.Tweet
+		l.Tweet = *e.Tweet
 		l.TimeStamp = e.TimeStamp
 		ret.Events = append([]SingleEventResponse{*l}, ret.Events...)
 	}
@@ -127,7 +127,7 @@
 		l.Source = e.Source
 		l.Target = e.Target
 		l.Content = e.Content
-		l.Tweet = e.Tweet
+		l.Tweet = *e.Tweet
 		l.TimeStamp = e.TimeStamp
 		ret.Events = append([]SingleEventResponse{*l}, ret.Events...)
 	}
Index: handler/tweet.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package handler\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/arman-aminian/twitter-backend/model\"\n\t\"github.com/arman-aminian/twitter-backend/utils\"\n\t\"github.com/labstack/echo/v4\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"sort\"\n\t\"time\"\n)\n\n// CreateArticle godoc\n// @Summary Create an tweet\n// @Description Create an tweet\n// @ID create-tweet\n// @Tags article\n// @Accept  json\n// @Produce  json\n// @Param article body tweetCreateRequest true \"Article to create\"\n// @Success 201 {object} singleTweetResponse\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /articles [post]\nfunc (h *Handler) CreateTweet(c echo.Context) error {\n\tt := model.NewTweet()\n\n\tt.ID = primitive.NewObjectID()\n\tt.Text = c.FormValue(\"text\")\n\n\tfile, err := c.FormFile(\"media\")\n\tif err == nil {\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tdefer src.Close()\n\n\t\tmediaFolderName := \"media/tweet-assets/\"\n\t\tmediaPath := mediaFolderName + file.Filename\n\t\tdst, err := os.Create(mediaPath)\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tt.Media = mediaPath\n\t} else {\n\t\t// Tweet without media\n\t\tt.Media = \"\"\n\t}\n\n\tu, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tt.Owner.Username = u.Username\n\tt.Owner.ProfilePicture = u.ProfilePicture\n\tt.Time = time.Now()\n\tt.Date = time.Now().Format(\"2006-01-02\")\n\n\tparentId := c.FormValue(\"parent\")\n\tif parentId != \"\" {\n\t\tp, err := h.tweetStore.GetTweetById(&parentId)\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t\tif p == nil {\n\t\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t\t}\n\n\t\tpid, _ := h.tweetStore.GetTweetById(&parentId)\n\t\t//\n\t\ttemp := *model.NewCommentTweet(*pid)\n\t\ttemp.CommentsCount = temp.CommentsCount + 1\n\t\t*t.Parents = append(*p.Parents, temp)\n\t\terr = h.tweetStore.AddCommentToTweet(p, model.NewCommentTweet(*t))\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t\t}\n\t}\n\n\terr = h.tweetStore.CreateTweet(t)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\terr = h.userStore.AddTweet(u, t)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\thashtags := h.tweetStore.ExtractHashtags(t)\n\tfor name, cnt := range hashtags {\n\t\th.AddHashtag(name, t, cnt)\n\t}\n\n\tres := newTweetResponse(c, t)\n\treturn c.JSON(http.StatusCreated, res)\n}\n\nfunc (h *Handler) GetTweetAssetFile(c echo.Context) error {\n\tmediaFolderName := \"media/tweet-assets/\"\n\tmediaPath := mediaFolderName + c.Param(\"filename\")\n\treturn c.File(mediaPath)\n}\n\nfunc (h *Handler) GetTweet(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\n\treturn c.JSON(http.StatusOK, newTweetResponse(c, t))\n}\n\nfunc (h *Handler) GetTweets(c echo.Context) error {\n\ttweets := &model.TweetIdList{}\n\terr := c.Bind(tweets)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\tfmt.Println(tweets)\n\tif len(tweets.Tweets) == 0 {\n\t\treturn c.JSON(http.StatusBadRequest, utils.NewError(errors.New(\"nothing to search for\")))\n\t}\n\tres, err := h.tweetStore.GetTweets(tweets.Tweets)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\t// sort tweets\n\tsorted := *res\n\tsort.Slice(sorted, func(i, j int) bool {\n\t\treturn sorted[i].Time.After(sorted[j].Time)\n\t})\n\treturn c.JSON(http.StatusOK, newTweetsResponse(stringFieldFromToken(c, \"username\"), &sorted))\n}\n\nfunc (h *Handler) DeleteTweet(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\n\tu, err := h.userStore.GetByUsername(t.Owner.Username)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tif u.Username != t.Owner.Username {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"you can only delete you tweets\")))\n\t}\n\n\terr = h.userStore.RemoveTweet(u, &id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\terr = h.tweetStore.RemoveTweet(t)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\thashtags := h.tweetStore.ExtractHashtags(t)\n\th.hashtagStore.DeleteTweetHashtags(t, hashtags)\n\n\treturn c.JSON(http.StatusOK, newTweetResponse(c, t))\n}\n\n// GetArticle godoc\n// @Summary Get an article\n// @Description Get an article. Auth not required\n// @ID get-article\n// @Tags article\n// @Accept  json\n// @Produce  json\n// @Param slug path string true \"Slug of the article to get\"\n// @Success 200 {object} singleArticleResponse\n// @Failure 400 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Router /articles/{slug} [get]\nfunc (h *Handler) GetTweetLikeAndRetweetList(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\n\treturn c.JSON(http.StatusOK, newLikeAndRetweetResponse(t))\n}\n\n// GetArticle godoc\n// @Summary Get an article\n// @Description Get an article. Auth not required\n// @ID get-article\n// @Tags article\n// @Accept  json\n// @Produce  json\n// @Param slug path string true \"Slug of the article to get\"\n// @Success 200 {object} singleArticleResponse\n// @Failure 400 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Router /articles/{slug} [get]\nfunc (h *Handler) GetRetweetList(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\n\treturn c.JSON(http.StatusOK, newLikeAndRetweetResponse(t))\n}\n\n// Favorite godoc\n// @Summary Favorite an article\n// @Description Favorite an article. Auth is required\n// @ID favorite\n// @Tags favorite\n// @Accept  json\n// @Produce  json\n// @Param slug path string true \"Slug of the article that you want to favorite\"\n// @Success 200 {object} singleArticleResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /articles/{slug}/favorite [post]\nfunc (h *Handler) Like(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tu, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tfor _, o := range *t.Likes {\n\t\tif u.Username == o.Username {\n\t\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"already liked\")))\n\t\t}\n\t}\n\n\tif err := h.tweetStore.LikeTweet(t, u); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\te := h.CreateLikeEvent(u, t)\n\terr = h.userStore.AddLog(u, e)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\ttarget, err := h.userStore.GetByUsername(t.Owner.Username)\n\tif target == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\terr = h.userStore.AddNotification(target, e)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\treturn c.JSON(http.StatusOK, newTweetResponse(c, t))\n}\n\n// Favorite godoc\n// @Summary Favorite an article\n// @Description Favorite an article. Auth is required\n// @ID favorite\n// @Tags favorite\n// @Accept  json\n// @Produce  json\n// @Param slug path string true \"Slug of the article that you want to favorite\"\n// @Success 200 {object} singleArticleResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /articles/{slug}/favorite [post]\nfunc (h *Handler) UnLike(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tu, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tb := false\n\tfor _, o := range *t.Likes {\n\t\tif u.Username == o.Username {\n\t\t\tb = true\n\t\t}\n\t}\n\tif !b {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"hasn't liked\")))\n\t}\n\n\tif err := h.tweetStore.UnLikeTweet(t, u); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\treturn c.JSON(http.StatusOK, newTweetResponse(c, t))\n}\n\n// Favorite godoc\n// @Summary Favorite an article\n// @Description Favorite an article. Auth is required\n// @ID favorite\n// @Tags favorite\n// @Accept  json\n// @Produce  json\n// @Param slug path string true \"Slug of the article that you want to favorite\"\n// @Success 200 {object} singleArticleResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /articles/{slug}/favorite [post]\nfunc (h *Handler) Retweet(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tu, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tfor _, o := range *t.Retweets {\n\t\tif u.Username == o.Username {\n\t\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"already retweeted\")))\n\t\t}\n\t}\n\n\tif err := h.tweetStore.Retweet(t, u); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\terr = h.userStore.AddTweet(u, t)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\te := h.CreateRetweetEvent(u, t)\n\terr = h.userStore.AddLog(u, e)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\ttarget, err := h.userStore.GetByUsername(t.Owner.Username)\n\tif target == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\terr = h.userStore.AddNotification(target, e)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\treturn c.JSON(http.StatusOK, newTweetResponse(c, t))\n}\n\n// Favorite godoc\n// @Summary Favorite an article\n// @Description Favorite an article. Auth is required\n// @ID favorite\n// @Tags favorite\n// @Accept  json\n// @Produce  json\n// @Param slug path string true \"Slug of the article that you want to favorite\"\n// @Success 200 {object} singleArticleResponse\n// @Failure 400 {object} utils.Error\n// @Failure 401 {object} utils.Error\n// @Failure 422 {object} utils.Error\n// @Failure 404 {object} utils.Error\n// @Failure 500 {object} utils.Error\n// @Security ApiKeyAuth\n// @Router /articles/{slug}/favorite [post]\nfunc (h *Handler) UnRetweet(c echo.Context) error {\n\tid := c.Param(\"id\")\n\tt, err := h.tweetStore.GetTweetById(&id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\tif t == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tu, err := h.userStore.GetByUsername(stringFieldFromToken(c, \"username\"))\n\tif u == nil {\n\t\treturn c.JSON(http.StatusNotFound, utils.NotFound())\n\t}\n\tb := false\n\tfor _, o := range *t.Retweets {\n\t\tif u.Username == o.Username {\n\t\t\tb = true\n\t\t}\n\t}\n\tif !b {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(errors.New(\"hasn't retweeted\")))\n\t}\n\n\tif err := h.tweetStore.UnRetweet(t, u); err != nil {\n\t\treturn c.JSON(http.StatusUnprocessableEntity, utils.NewError(err))\n\t}\n\n\terr = h.userStore.RemoveTweet(u, &id)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, utils.NewError(err))\n\t}\n\n\treturn c.JSON(http.StatusOK, newTweetResponse(c, t))\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- handler/tweet.go	(revision e2bdbad85d693a8060ec435ae44289e8fa9ccc8d)
+++ handler/tweet.go	(date 1611820520965)
@@ -276,6 +276,7 @@
 	}
 
 	e := h.CreateLikeEvent(u, t)
+	fmt.Println("event is ", e)
 	err = h.userStore.AddLog(u, e)
 	if err != nil {
 		return c.JSON(http.StatusInternalServerError, utils.NewError(err))
Index: model/event.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model\n\nimport (\n\t\"time\"\n)\n\ntype Event struct {\n\tMode      string    `json:\"mode\" bson:\"mode\"`\n\tSource    Owner     `json:\"source\" bson:\"source\"`\n\tTarget    Owner     `json:\"target\" bson:\"target\"`\n\tContent   string    `json:\"content\" bson:\"content\"`\n\tTimeStamp time.Time `json:\"timestamp\" bson:\"timestamp\"`\n\tTweet     Tweet     `json:\"tweet\" bson:\"tweet\"`\n\t// EventID   string              `json:\"event_id\" bson:\"event_id\"`\n}\n\nfunc NewEvent() *Event {\n\tvar e Event\n\te.TimeStamp, _ = time.Parse(\"2006-01-02 03:04:05\", time.Now().Format(\"2006-01-02 03:04:05\"))\n\treturn &e\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- model/event.go	(revision e2bdbad85d693a8060ec435ae44289e8fa9ccc8d)
+++ model/event.go	(date 1611819941902)
@@ -10,12 +10,13 @@
 	Target    Owner     `json:"target" bson:"target"`
 	Content   string    `json:"content" bson:"content"`
 	TimeStamp time.Time `json:"timestamp" bson:"timestamp"`
-	Tweet     Tweet     `json:"tweet" bson:"tweet"`
+	Tweet     *Tweet     `json:"tweet" bson:"tweet"`
 	// EventID   string              `json:"event_id" bson:"event_id"`
 }
 
 func NewEvent() *Event {
 	var e Event
 	e.TimeStamp, _ = time.Parse("2006-01-02 03:04:05", time.Now().Format("2006-01-02 03:04:05"))
+	e.Tweet = &Tweet{}
 	return &e
 }
Index: handler/event.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package handler\n\nimport (\n\t\"fmt\"\n\t\"github.com/arman-aminian/twitter-backend/model\"\n)\n\nfunc (h *Handler) CreateFollowEvent(src *model.User, target *model.User) *model.Event {\n\te := model.NewEvent()\n\te.Mode = \"Follow\"\n\te.Source = *model.NewOwner(src.Username, src.ProfilePicture, src.Name, src.Bio)\n\te.Target = *model.NewOwner(target.Username, target.ProfilePicture, target.Name, target.Bio)\n\t// e.Tweet = nil\n\te.Content = fmt.Sprintf(\"User %s followed User %s at %s.\", e.Source.Username, e.Target.Username, e.TimeStamp)\n\treturn e\n}\n\nfunc (h *Handler) CreateLikeEvent(src *model.User, t *model.Tweet) *model.Event {\n\te := model.NewEvent()\n\te.Mode = \"Like\"\n\te.Source = *model.NewOwner(src.Username, src.ProfilePicture, src.Name, src.Bio)\n\te.Target = *model.NewOwner(t.Owner.Username, t.Owner.ProfilePicture, t.Owner.Name, t.Owner.Bio)\n\te.Tweet = *t\n\te.Content = fmt.Sprintf(\"User %s liked Tweet %s at %s.\", e.Source.Username, t.Text, e.TimeStamp)\n\treturn e\n}\n\nfunc (h *Handler) CreateRetweetEvent(src *model.User, t *model.Tweet) *model.Event {\n\te := model.NewEvent()\n\te.Mode = \"Retweet\"\n\te.Source = *model.NewOwner(src.Username, src.ProfilePicture, src.Name, src.Bio)\n\te.Target = *model.NewOwner(t.Owner.Username, t.Owner.ProfilePicture, t.Owner.Name, t.Owner.Bio)\n\te.Tweet = *t\n\te.Content = fmt.Sprintf(\"User %s retweeted Tweet %s at %s.\", e.Source.Username, t.Text, e.TimeStamp)\n\treturn e\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- handler/event.go	(revision e2bdbad85d693a8060ec435ae44289e8fa9ccc8d)
+++ handler/event.go	(date 1611821914433)
@@ -20,7 +20,7 @@
 	e.Mode = "Like"
 	e.Source = *model.NewOwner(src.Username, src.ProfilePicture, src.Name, src.Bio)
 	e.Target = *model.NewOwner(t.Owner.Username, t.Owner.ProfilePicture, t.Owner.Name, t.Owner.Bio)
-	e.Tweet = *t
+	e.Tweet = t
 	e.Content = fmt.Sprintf("User %s liked Tweet %s at %s.", e.Source.Username, t.Text, e.TimeStamp)
 	return e
 }
@@ -30,7 +30,7 @@
 	e.Mode = "Retweet"
 	e.Source = *model.NewOwner(src.Username, src.ProfilePicture, src.Name, src.Bio)
 	e.Target = *model.NewOwner(t.Owner.Username, t.Owner.ProfilePicture, t.Owner.Name, t.Owner.Bio)
-	e.Tweet = *t
+	e.Tweet = t
 	e.Content = fmt.Sprintf("User %s retweeted Tweet %s at %s.", e.Source.Username, t.Text, e.TimeStamp)
 	return e
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"BranchesTreeState\">\n    <expand>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n    </expand>\n    <select />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"013294ec-98ac-45bd-af48-e710fa1307fc\" name=\"Default Changelist\" comment=\"Fixed event sorting.\">\n      <change beforePath=\"$PROJECT_DIR$/main.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.go\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Go File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"GOROOT\" path=\"/usr/local/go\" />\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"fix-owner\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GoLibraries\">\n    <option name=\"indexEntireGoPath\" value=\"false\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1nQeTZVwn2YiaBWpPzCEfnSF47D\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"DefaultGoTemplateProperty\" value=\"Go File\" />\n    <property name=\"GO_FMT\" value=\"true\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"go.import.settings.migrated\" value=\"true\" />\n    <property name=\"go.sdk.automatically.set\" value=\"true\" />\n    <property name=\"go.tried.to.enable.integration.vgo.integrator\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../../hw4\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"editor.preferences.tabs\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/test\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Go Build.go build main.go\">\n    <configuration name=\"go build main.go\" type=\"GoApplicationRunConfiguration\" factoryName=\"Go Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$\" />\n      <kind value=\"FILE\" />\n      <filePath value=\"$PROJECT_DIR$/main.go\" />\n      <package value=\"github.com/arman-aminian/twitter-backend\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TestGetProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" type=\"GoTestRunConfiguration\" factoryName=\"Go Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$/handler\" />\n      <framework value=\"gotest\" />\n      <kind value=\"PACKAGE\" />\n      <package value=\"github.com/arman-aminian/twitter-backend/handler\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <filePath value=\"$PROJECT_DIR$/\" />\n      <pattern value=\"^TestGetProfileSuccess$\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TestUpdateProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" type=\"GoTestRunConfiguration\" factoryName=\"Go Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$/handler\" />\n      <framework value=\"gotest\" />\n      <kind value=\"PACKAGE\" />\n      <package value=\"github.com/arman-aminian/twitter-backend/handler\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <filePath value=\"$PROJECT_DIR$/\" />\n      <pattern value=\"^TestUpdateProfileSuccess$\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TestUpdateUserSuccess in github.com/arman-aminian/twitter-backend/handler\" type=\"GoTestRunConfiguration\" factoryName=\"Go Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"twitter-backend\" />\n      <working_directory value=\"$PROJECT_DIR$/handler\" />\n      <framework value=\"gotest\" />\n      <kind value=\"PACKAGE\" />\n      <package value=\"github.com/arman-aminian/twitter-backend/handler\" />\n      <directory value=\"$PROJECT_DIR$/\" />\n      <filePath value=\"$PROJECT_DIR$/\" />\n      <pattern value=\"^TestUpdateUserSuccess$\" />\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"Go Build.go build main.go\" />\n      <item itemvalue=\"Go Test.TestGetProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n      <item itemvalue=\"Go Test.TestUpdateProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n      <item itemvalue=\"Go Test.TestUpdateUserSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Go Build.go build main.go\" />\n        <item itemvalue=\"Go Test.TestUpdateUserSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n        <item itemvalue=\"Go Test.TestUpdateProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n        <item itemvalue=\"Go Test.TestGetProfileSuccess in github.com/arman-aminian/twitter-backend/handler\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"013294ec-98ac-45bd-af48-e710fa1307fc\" name=\"Default Changelist\" comment=\"\" />\n      <created>1611326749549</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1611326749549</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Added sign up and login from the realworld example and changes are very similar to that.\">\n      <created>1611356145376</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611356145376</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added some tests, AddFollower, IsFollower.\">\n      <created>1611426506110</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611426506110</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Added GetProfile test.\">\n      <created>1611429775971</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611429775971</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Added updateProfile and updateUser.\">\n      <created>1611492691419</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611492691420</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Added updateProfile and updateUser.\">\n      <created>1611494231261</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611494231261</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Added Follow and UnFollow.\">\n      <created>1611505019777</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611505019777</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Added Like/Unlike and Retweet/UnRetweet.\">\n      <created>1611513416188</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611513416188</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Added Followers and Followings list.\">\n      <created>1611516118640</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611516118640</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Event source and target are now Owners.\">\n      <created>1611516943701</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611516943701</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Added Like and Retweet events. Event addition is done in UserStore now.\">\n      <created>1611521293502</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611521293502</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Fixed Retweet and UnRetweet. Added Get Tweet.\">\n      <created>1611578514469</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611578514469</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Added Trends and Hashtags. Fixed RemoveTweet in UserStore.\">\n      <created>1611603246138</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611603246138</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Added name to User.\">\n      <created>1611603860289</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611603860289</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Added Logs and Notifications List.\">\n      <created>1611618107627</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611618107627</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Hashtags have their own database now.\">\n      <created>1611637552156</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611637552156</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Added hashtag search.\">\n      <created>1611663527804</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611663527805</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Login now returns more information.\">\n      <created>1611667519343</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611667519343</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"Added Name to sign up input.\">\n      <created>1611684546365</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611684546366</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"Temporarily fixed GetTimeline.\">\n      <created>1611693045732</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611693045732</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"Fixed a bug relating user profile.\">\n      <created>1611759770441</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611759770441</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"We don't need token for searching.\">\n      <created>1611769267526</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611769267526</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"Fixed event sorting.\">\n      <created>1611811186347</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611811186347</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"23\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"2\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Added sign up and login from the realworld example and changes are very similar to that.\" />\n    <MESSAGE value=\"Added some tests, AddFollower, IsFollower.\" />\n    <MESSAGE value=\"Added GetProfile test.\" />\n    <MESSAGE value=\"Added updateProfile and updateUser.\" />\n    <MESSAGE value=\"Added Follow and UnFollow.\" />\n    <MESSAGE value=\"Added Like/Unlike and Retweet/UnRetweet.\" />\n    <MESSAGE value=\"Added Followers and Followings list.\" />\n    <MESSAGE value=\"Event source and target are now Owners.\" />\n    <MESSAGE value=\"Added Like and Retweet events. Event addition is done in UserStore now.\" />\n    <MESSAGE value=\"Fixed Retweet and UnRetweet. Added Get Tweet.\" />\n    <MESSAGE value=\"Added Trends and Hashtags. Fixed RemoveTweet in UserStore.\" />\n    <MESSAGE value=\"Added name to User.\" />\n    <MESSAGE value=\"Added Logs and Notifications List.\" />\n    <MESSAGE value=\"Hashtags have their own database now.\" />\n    <MESSAGE value=\"Added hashtag search.\" />\n    <MESSAGE value=\"Login now returns more information.\" />\n    <MESSAGE value=\"Added Name to sign up input.\" />\n    <MESSAGE value=\"Temporarily fixed GetTimeline.\" />\n    <MESSAGE value=\"Fixed a bug relating user profile.\" />\n    <MESSAGE value=\"We don't need token for searching.\" />\n    <MESSAGE value=\"Fixed event sorting.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed event sorting.\" />\n  </component>\n  <component name=\"VgoProject\">\n    <integration-enabled>true</integration-enabled>\n  </component>\n  <component name=\"WindowStateProjectService\">\n    <state x=\"513\" y=\"67\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1611811883713\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"513\" y=\"67\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611811883713\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"#com.intellij.execution.junit2.states.ComparisonFailureState$DiffDialog\" timestamp=\"1611491097649\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"#com.intellij.execution.junit2.states.ComparisonFailureState$DiffDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611491097649\" />\n    <state x=\"666\" y=\"182\" width=\"580\" height=\"747\" key=\"#go_build_test.go\" timestamp=\"1611501300508\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"666\" y=\"182\" width=\"580\" height=\"747\" key=\"#go_build_test.go/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611501300508\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" maximized=\"true\" key=\"DiffContextDialog\" timestamp=\"1611521988084\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" maximized=\"true\" key=\"DiffContextDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611521988084\" />\n    <state x=\"743\" y=\"313\" width=\"426\" height=\"485\" key=\"FileChooserDialogImpl\" timestamp=\"1611331807352\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"743\" y=\"313\" width=\"426\" height=\"485\" key=\"FileChooserDialogImpl/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611331807352\" />\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1611817729877\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.bottom/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611817729877\" />\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.center\" timestamp=\"1611817729877\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.center/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611817729877\" />\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.left\" timestamp=\"1611817729876\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.left/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611817729876\" />\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.right\" timestamp=\"1611817729877\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state width=\"1874\" height=\"288\" key=\"GridCell.Tab.0.right/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611817729877\" />\n    <state x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" key=\"MergeDialog\" timestamp=\"1611751210631\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" key=\"MergeDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611751210631\" />\n    <state x=\"574\" y=\"331\" width=\"714\" height=\"474\" key=\"MultipleFileMergeDialog\" timestamp=\"1611603297835\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"574\" y=\"331\" width=\"714\" height=\"474\" key=\"MultipleFileMergeDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611603297835\" />\n    <state x=\"686\" y=\"250\" width=\"539\" height=\"611\" key=\"RollbackChangesDialog\" timestamp=\"1611811079339\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"686\" y=\"250\" width=\"539\" height=\"611\" key=\"RollbackChangesDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611811079339\" />\n    <state x=\"464\" y=\"190\" width=\"992\" height=\"731\" key=\"SettingsEditor\" timestamp=\"1611412082455\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"464\" y=\"190\" width=\"992\" height=\"731\" key=\"SettingsEditor/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611412082455\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"ShowDiffWithBranchDialog\" timestamp=\"1611493173765\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"ShowDiffWithBranchDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611493173765\" />\n    <state x=\"555\" y=\"291\" width=\"802\" height=\"529\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1611811187894\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"555\" y=\"291\" width=\"802\" height=\"529\" key=\"Vcs.Push.Dialog.v2/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611811187894\" />\n    <state x=\"742\" y=\"318\" width=\"428\" height=\"474\" key=\"com.goide.refactor.move.GoMoveDeclarationDialog\" timestamp=\"1611588018886\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"742\" y=\"318\" width=\"428\" height=\"474\" key=\"com.goide.refactor.move.GoMoveDeclarationDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611588018886\" />\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"com.intellij.history.integration.ui.views.FileHistoryDialog\" timestamp=\"1611751700040\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"99\" y=\"125\" width=\"1722\" height=\"860\" key=\"com.intellij.history.integration.ui.views.FileHistoryDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611751700040\" />\n    <state x=\"765\" y=\"471\" width=\"389\" height=\"169\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1611811040301\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"765\" y=\"471\" width=\"389\" height=\"169\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611811040301\" />\n    <state x=\"68\" y=\"67\" width=\"1628\" height=\"818\" key=\"find.popup\" timestamp=\"1611760979486\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"68\" y=\"67\" width=\"1628\" height=\"818\" key=\"find.popup/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611760979486\" />\n    <state x=\"804\" y=\"316\" width=\"303\" height=\"478\" key=\"refactoring.ChangeSignatureDialog\" timestamp=\"1611586669164\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"804\" y=\"316\" width=\"303\" height=\"478\" key=\"refactoring.ChangeSignatureDialog/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611586669164\" />\n    <state x=\"623\" y=\"259\" width=\"672\" height=\"678\" key=\"search.everywhere.popup\" timestamp=\"1611789080782\">\n      <screen x=\"0\" y=\"25\" width=\"1920\" height=\"1055\" />\n    </state>\n    <state x=\"623\" y=\"259\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.25.1920.1055@0.25.1920.1055\" timestamp=\"1611789080782\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision e2bdbad85d693a8060ec435ae44289e8fa9ccc8d)
+++ .idea/workspace.xml	(date 1611821914473)
@@ -20,7 +20,13 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="013294ec-98ac-45bd-af48-e710fa1307fc" name="Default Changelist" comment="Fixed event sorting.">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/db/db.go" beforeDir="false" afterPath="$PROJECT_DIR$/db/db.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/handler/event.go" beforeDir="false" afterPath="$PROJECT_DIR$/handler/event.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/handler/response.go" beforeDir="false" afterPath="$PROJECT_DIR$/handler/response.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/handler/tweet.go" beforeDir="false" afterPath="$PROJECT_DIR$/handler/tweet.go" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/main.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/event.go" beforeDir="false" afterPath="$PROJECT_DIR$/model/event.go" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -367,22 +373,22 @@
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
     <state x="743" y="313" width="426" height="485" key="FileChooserDialogImpl/0.25.1920.1055@0.25.1920.1055" timestamp="1611331807352" />
-    <state width="1874" height="288" key="GridCell.Tab.0.bottom" timestamp="1611817729877">
+    <state width="1874" height="325" key="GridCell.Tab.0.bottom" timestamp="1611821788417">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="288" key="GridCell.Tab.0.bottom/0.25.1920.1055@0.25.1920.1055" timestamp="1611817729877" />
-    <state width="1874" height="288" key="GridCell.Tab.0.center" timestamp="1611817729877">
+    <state width="1874" height="325" key="GridCell.Tab.0.bottom/0.25.1920.1055@0.25.1920.1055" timestamp="1611821788417" />
+    <state width="1874" height="325" key="GridCell.Tab.0.center" timestamp="1611821788416">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="288" key="GridCell.Tab.0.center/0.25.1920.1055@0.25.1920.1055" timestamp="1611817729877" />
-    <state width="1874" height="288" key="GridCell.Tab.0.left" timestamp="1611817729876">
+    <state width="1874" height="325" key="GridCell.Tab.0.center/0.25.1920.1055@0.25.1920.1055" timestamp="1611821788416" />
+    <state width="1874" height="325" key="GridCell.Tab.0.left" timestamp="1611821788416">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="288" key="GridCell.Tab.0.left/0.25.1920.1055@0.25.1920.1055" timestamp="1611817729876" />
-    <state width="1874" height="288" key="GridCell.Tab.0.right" timestamp="1611817729877">
+    <state width="1874" height="325" key="GridCell.Tab.0.left/0.25.1920.1055@0.25.1920.1055" timestamp="1611821788416" />
+    <state width="1874" height="325" key="GridCell.Tab.0.right" timestamp="1611821788416">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state width="1874" height="288" key="GridCell.Tab.0.right/0.25.1920.1055@0.25.1920.1055" timestamp="1611817729877" />
+    <state width="1874" height="325" key="GridCell.Tab.0.right/0.25.1920.1055@0.25.1920.1055" timestamp="1611821788416" />
     <state x="0" y="25" width="1920" height="1055" key="MergeDialog" timestamp="1611751210631">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
@@ -415,10 +421,10 @@
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
     <state x="99" y="125" width="1722" height="860" key="com.intellij.history.integration.ui.views.FileHistoryDialog/0.25.1920.1055@0.25.1920.1055" timestamp="1611751700040" />
-    <state x="765" y="471" width="389" height="169" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1611811040301">
+    <state x="765" y="471" width="389" height="169" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1611821914425">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
-    <state x="765" y="471" width="389" height="169" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.25.1920.1055@0.25.1920.1055" timestamp="1611811040301" />
+    <state x="765" y="471" width="389" height="169" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.25.1920.1055@0.25.1920.1055" timestamp="1611821914425" />
     <state x="68" y="67" width="1628" height="818" key="find.popup" timestamp="1611760979486">
       <screen x="0" y="25" width="1920" height="1055" />
     </state>
